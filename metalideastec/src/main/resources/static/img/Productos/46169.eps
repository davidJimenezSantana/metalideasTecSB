%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1501.m00.i123.n008.P.c20.construction tools flat icons.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For:  
%%CreationDate: 1/15/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">halmet</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-01-15T12:02:38+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2015-01-15T12:02:38+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-01-15T12:02:38+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqtll&#xA;jijaSVgkaCrOxoAPc5Cc4wiZSNAJjEk0ObEtV8+ojNFpsQkpt68lQv8AsV2P35yGv9qxE8OAX/SP&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:fe173462-1ef1-4e4d-a88f-3f063670e48e</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:fe173462-1ef1-4e4d-a88f-3f063670e48e</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:1c126fb5-9183-4fce-8809-36ee9a5b6ea5</stRef:instanceID>
            <stRef:documentID>xmp.did:9bb6d3e3-d58b-4f43-b4b5-dd8bd8107edf</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2f307519-54a1-1245-ba5a-3118019094fb</stEvt:instanceID>
                  <stEvt:when>2015-01-06T15:47:59+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fe173462-1ef1-4e4d-a88f-3f063670e48e</stEvt:instanceID>
                  <stEvt:when>2015-01-15T12:02:38+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 G=128 B=128</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=54 G=54 B=54</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>54</xmpG:red>
                           <xmpG:green>54</xmpG:green>
                           <xmpG:blue>54</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=204 B=204</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=243 G=222 B=156</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>221</xmpG:green>
                           <xmpG:blue>156</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=177 B=13</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>177</xmpG:green>
                           <xmpG:blue>12</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=153 B=153</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>153</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=209 G=139 B=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>209</xmpG:red>
                           <xmpG:green>138</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=77 G=77 B=77</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>77</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=173 G=237 B=88</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>172</xmpG:red>
                           <xmpG:green>237</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=130 G=224 B=7</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>130</xmpG:red>
                           <xmpG:green>223</xmpG:green>
                           <xmpG:blue>7</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=69 G=46 B=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>68</xmpG:red>
                           <xmpG:green>45</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=77 G=77 B=77</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>77</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 G=128 B=128</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=153 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>153</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=204 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
97.6676 105.03 mo
162.759 105.03 li
166.372 105.03 169.314 102.123 169.356 98.5108 cv
169.411 93.7596 168.059 88.3335 165.031 84.5755 cv
163.971 83.2588 162.446 82.401 160.77 82.1767 cv
97.6676 73.7315 li
44.9675 75.4534 27.1658 79.9901 27.1617 89.3806 cv
27.157 100.148 62.6981 106.191 97.6676 105.03 cv
cp
.968627 .694118 .05098 rgb
f
142.021 82.2393 mo
160.419 84.7251 li
160.924 84.7934 161.376 85.0829 161.648 85.5147 cv
163.668 88.7192 165.271 94.4219 165.262 98.4275 cv
165.26 99.3786 164.488 100.148 163.537 100.148 cv
85.793 100.148 li
142.021 82.2393 li
cp
.952941 .870588 .611765 rgb
f
33.1048 86.6747 mo
33.1048 104.632 143.759 104.647 143.759 86.6747 cv
143.759 56.1184 121.627 30.0282 88.4318 30.0282 cv
55.2368 30.0282 33.1048 56.1184 33.1048 86.6747 cv
cp
.968627 .694118 .05098 rgb
f
140.377 93.706 mo
139.294 93.706 138.412 92.8362 138.398 91.7516 cv
138.004 59.9675 117.458 37.7695 88.4321 37.7695 cv
87.3389 37.7695 86.4529 36.8835 86.4529 35.7904 cv
86.4529 34.6972 87.3389 33.8112 88.4321 33.8112 cv
119.76 33.8112 141.933 57.6172 142.356 91.702 cv
142.369 92.7952 141.494 93.6919 140.402 93.706 cv
140.393 93.706 140.384 93.706 140.377 93.706 cv
cp
.952941 .870588 .611765 rgb
f
42.5457 84.3778 mo
42.4442 84.3778 42.3406 84.3703 42.237 84.3541 cv
41.1568 84.1847 40.4187 83.1713 40.5881 82.0922 cv
44.4903 57.2297 62.375 42.3872 88.4321 42.3872 cv
107.252 42.3872 122.078 50.1268 130.177 64.1794 cv
130.723 65.1269 130.397 66.3367 129.45 66.8827 cv
128.5 67.4298 127.293 67.1029 126.747 66.1564 cv
119.385 53.3815 105.778 46.3455 88.4321 46.3455 cv
64.1383 46.3455 48.1249 59.5985 44.4989 82.7051 cv
44.3457 83.6818 43.504 84.3778 42.5457 84.3778 cv
cp
.819608 .545098 0 rgb
f
46.2833 89.0931 mo
46.2833 103.827 130.58 103.84 130.58 89.0931 cv
130.58 64.0214 111.338 52.6501 88.4318 52.6501 cv
65.5253 52.6501 46.2833 64.0214 46.2833 89.0931 cv
cp
f
129.455 96.0789 mo
127.727 83.5085 li
117.392 86.3672 li
118.174 98.2442 li
129.455 96.0789 li
cp
.968627 .694118 .05098 rgb
f
47.4089 96.0789 mo
49.1364 83.5085 li
59.4717 86.3672 li
58.6688 98.5658 li
47.4089 96.0789 li
cp
f
81.6541 100.688 mo
82.3138 88.2738 li
88.4318 88.2738 li
94.5499 88.2738 li
95.2096 100.688 li
81.6541 100.688 li
cp
f
85.793 64.8739 mo
85.793 66.3313 86.9745 67.5127 88.4318 67.5127 cv
89.8892 67.5127 91.0706 66.3313 91.0706 64.8739 cv
91.0706 63.4166 89.8892 62.2352 88.4318 62.2352 cv
86.9745 62.2352 85.793 63.4166 85.793 64.8739 cv
cp
f
95.2096 66.1933 mo
95.2096 67.6507 96.391 68.8321 97.8484 68.8321 cv
99.3058 68.8321 100.487 67.6507 100.487 66.1933 cv
100.487 64.736 99.3058 63.5545 97.8484 63.5545 cv
96.391 63.5545 95.2096 64.736 95.2096 66.1933 cv
cp
f
81.7779 66.3172 mo
81.7779 67.8429 80.541 69.0798 79.0153 69.0798 cv
77.4895 69.0798 76.2527 67.8429 76.2527 66.3172 cv
76.2527 64.7914 77.4895 63.5545 79.0153 63.5545 cv
80.541 63.5545 81.7779 64.7914 81.7779 66.3172 cv
cp
f
85.793 63.7689 mo
85.793 65.2263 86.9745 66.4077 88.4318 66.4077 cv
89.8892 66.4077 91.0706 65.2263 91.0706 63.7689 cv
91.0706 62.3115 89.8892 61.1301 88.4318 61.1301 cv
86.9745 61.1301 85.793 62.3115 85.793 63.7689 cv
cp
.270588 .180392 0 rgb
f
95.2096 65.0883 mo
95.2096 66.5457 96.391 67.7271 97.8484 67.7271 cv
99.3058 67.7271 100.487 66.5457 100.487 65.0883 cv
100.487 63.6309 99.3058 62.4495 97.8484 62.4495 cv
96.391 62.4495 95.2096 63.6309 95.2096 65.0883 cv
cp
f
81.6541 65.0883 mo
81.6541 66.5457 80.4726 67.7271 79.0153 67.7271 cv
77.5579 67.7271 76.3765 66.5457 76.3765 65.0883 cv
76.3765 63.6309 77.5579 62.4495 79.0153 62.4495 cv
80.4726 62.4495 81.6541 63.6309 81.6541 65.0883 cv
cp
f
355.511 51.7905 mo
349.966 51.7905 li
348.37 51.7905 347.076 50.4966 347.076 48.9004 cv
347.076 47.3042 348.37 46.0103 349.966 46.0103 cv
355.511 46.0103 li
357.106 46.0103 358.4 47.3042 358.4 48.9004 cv
358.4 50.4966 357.106 51.7905 355.511 51.7905 cv
cp
364.572 36.2266 mo
233.789 36.2266 li
218.21 79.5289 li
233.303 94.6213 li
235.352 89.2137 li
240.907 94.4312 li
243.6 87.2916 li
249.166 92.509 li
251.87 85.3799 li
257.425 90.5867 li
260.119 83.4577 li
265.685 88.6646 li
268.378 81.5355 li
273.944 86.7529 li
276.647 79.6133 li
282.203 84.8307 li
284.907 77.7017 li
290.472 82.9085 li
293.166 75.7795 li
298.732 80.9863 li
301.425 73.8573 li
306.991 79.0641 li
309.684 71.9351 li
315.25 77.1525 li
317.943 70.0129 li
323.509 75.2303 li
326.213 68.1013 li
331.768 73.3081 li
334.472 66.1791 li
340.038 71.3859 li
342.741 64.2569 li
348.307 69.4637 li
351 62.3347 li
356.577 67.5415 li
359.27 60.4125 li
364.847 65.6193 li
367.74 57.9833 li
364.572 36.2266 li
cp
.6 .6 .6 rgb
f
222.88 49.35 mo
220.38 70.58 li
219.97 74.07 217.01 76.64 213.58 76.64 cv
213.31 76.64 213.04 76.63 212.77 76.6 cv
209 76.15 206.31 72.74 206.75 68.98 cv
209.25 47.75 li
209.69 43.98 213.11 41.29 216.87 41.73 cv
220.63 42.17 223.33 45.58 222.88 49.35 cv
cp
239.33 32 mo
192.58 32 li
191.49 32 190.48 32.56 189.9 33.47 cv
189.37 34.29 189.27 35.32 189.59 36.23 cv
189.62 36.32 189.66 36.43 189.71 36.52 cv
194.89 47.54 li
195.64 49.12 195.93 50.88 195.71 52.61 cv
194.19 65.56 li
194.01 67.1 193.44 68.58 192.55 69.85 cv
184.77 80.87 li
184.6 81.11 184.47 81.38 184.38 81.64 cv
184.09 82.45 184.14 83.37 184.55 84.15 cv
185.09 85.21 186.18 85.87 187.36 85.87 cv
231.48 85.87 li
246.19 69.63 li
239.33 32 li
cp
.968627 .694118 .05098 rgb
f
222.88 49.35 mo
220.38 70.58 li
219.97 74.07 217.01 76.64 213.58 76.64 cv
213.31 76.64 213.04 76.63 212.77 76.6 cv
209 76.15 206.31 72.74 206.75 68.98 cv
209.25 47.75 li
209.69 43.98 213.11 41.29 216.87 41.73 cv
220.63 42.17 223.33 45.58 222.88 49.35 cv
cp
222.89 40.4 mo
220.53 37.75 217.14 36.23 213.59 36.23 cv
189.59 36.23 li
189.62 36.32 189.66 36.43 189.71 36.52 cv
194.89 47.54 li
195.64 49.12 195.93 50.88 195.71 52.61 cv
194.19 65.56 li
194.01 67.1 193.44 68.58 192.55 69.85 cv
184.77 80.87 li
184.6 81.11 184.47 81.38 184.38 81.64 cv
213.29 81.64 li
218.4 81.64 222.71 77.81 223.3 72.73 cv
225.96 50.14 li
226.37 46.6 225.26 43.06 222.89 40.4 cv
cp
.211765 .211765 .211765 rgb
f
229.564 43.0916 mo
229.564 44.8415 230.983 46.2601 232.733 46.2601 cv
234.482 46.2601 235.901 44.8415 235.901 43.0916 cv
235.901 41.3417 234.482 39.9232 232.733 39.9232 cv
230.983 39.9232 229.564 41.3417 229.564 43.0916 cv
cp
.952941 .870588 .611765 rgb
f
230.092 42.2995 mo
230.092 43.7577 231.274 44.9399 232.733 44.9399 cv
234.191 44.9399 235.373 43.7577 235.373 42.2995 cv
235.373 40.8413 234.191 39.6591 232.733 39.6591 cv
231.274 39.6591 230.092 40.8413 230.092 42.2995 cv
cp
.301961 .301961 .301961 rgb
f
233.261 64.4971 mo
233.261 66.247 234.679 67.6655 236.429 67.6655 cv
238.179 67.6655 239.598 66.247 239.598 64.4971 cv
239.598 62.7472 238.179 61.3286 236.429 61.3286 cv
234.679 61.3286 233.261 62.7472 233.261 64.4971 cv
cp
.952941 .870588 .611765 rgb
f
233.789 63.7049 mo
233.789 65.1632 234.971 66.3453 236.429 66.3453 cv
237.887 66.3453 239.069 65.1632 239.069 63.7049 cv
239.069 62.2467 237.887 61.0646 236.429 61.0646 cv
234.971 61.0646 233.789 62.2467 233.789 63.7049 cv
cp
.301961 .301961 .301961 rgb
f
224.811 77.0645 mo
224.811 78.8144 226.23 80.233 227.98 80.233 cv
229.73 80.233 231.148 78.8144 231.148 77.0645 cv
231.148 75.3146 229.73 73.896 227.98 73.896 cv
226.23 73.896 224.811 75.3146 224.811 77.0645 cv
cp
.952941 .870588 .611765 rgb
f
225.34 76.2724 mo
225.34 77.7306 226.522 78.9128 227.98 78.9128 cv
229.438 78.9128 230.62 77.7306 230.62 76.2724 cv
230.62 74.8141 229.438 73.632 227.98 73.632 cv
226.522 73.632 225.34 74.8141 225.34 76.2724 cv
cp
.301961 .301961 .301961 rgb
f
193.478 77.2129 mo
193.253 77.2129 193.026 77.1499 192.824 77.019 cv
192.266 76.6572 192.107 75.9116 192.468 75.3535 cv
196.873 68.5566 li
199.035 50.1758 li
199.112 49.5151 199.71 49.0376 200.372 49.1206 cv
201.032 49.1982 201.504 49.7964 201.427 50.457 cv
199.232 69.1167 li
199.211 69.3003 199.147 69.4761 199.047 69.6309 cv
194.49 76.6631 li
194.259 77.019 193.873 77.2129 193.478 77.2129 cv
cp
.501961 .501961 .501961 rgb
f
245.133 40.9793 mo
315.865 40.9793 li
303.519 69.7135 li
246.903 82.6973 li
252.535 69.3194 li
245.133 40.9793 li
cp
.8 .8 .8 rgb
f
283.524 78.4253 mo
279.952 76.978 li
295.368 38.9355 li
298.94 40.3828 li
283.524 78.4253 li
cp
.6 .6 .6 rgb
f
272.393 82.2671 mo
267.035 80.0962 li
284.504 36.9893 li
289.861 39.1602 li
272.393 82.2671 li
cp
f
334.631 286.578 mo
334.279 286.578 li
330.714 286.578 327.714 283.909 327.299 280.368 cv
323.255 245.874 li
322.963 243.383 323.75 240.886 325.417 239.012 cv
327.084 237.138 329.472 236.066 331.98 236.066 cv
334.257 236.066 li
346.508 236.066 356.438 226.136 356.438 213.885 cv
356.438 201.635 346.508 191.704 334.257 191.704 cv
272.985 191.704 li
257.465 195.218 li
257.465 232.553 li
272.985 236.066 li
280.951 236.066 li
283.757 237.28 285.724 240.063 285.724 243.314 cv
285.724 245.931 284.447 248.244 282.488 249.683 cv
289.721 249.683 li
291.949 249.683 293.824 251.351 294.084 253.563 cv
297.034 278.732 li
297.268 280.725 296.638 282.722 295.305 284.221 cv
293.971 285.72 292.06 286.578 290.054 286.578 cv
334.631 286.578 li
cp
.211765 .211765 .211765 rgb
f
gsave
334.631 286.578 mo
334.279 286.578 li
330.714 286.578 327.714 283.909 327.299 280.368 cv
323.255 245.874 li
322.963 243.383 323.75 240.886 325.417 239.012 cv
327.084 237.138 329.472 236.066 331.98 236.066 cv
334.257 236.066 li
346.508 236.066 356.438 226.136 356.438 213.885 cv
356.438 201.635 346.508 191.704 334.257 191.704 cv
272.985 191.704 li
257.465 195.218 li
257.465 232.553 li
272.985 236.066 li
280.951 236.066 li
283.757 237.28 285.724 240.063 285.724 243.314 cv
285.724 245.931 284.447 248.244 282.488 249.683 cv
289.721 249.683 li
291.949 249.683 293.824 251.351 294.084 253.563 cv
297.034 278.732 li
297.268 280.725 296.638 282.722 295.305 284.221 cv
293.971 285.72 292.06 286.578 290.054 286.578 cv
334.631 286.578 li
cp
clp
266.689 202.026 mo
253.072 202.026 li
251.86 202.026 250.877 201.043 250.877 199.83 cv
250.877 198.617 251.86 197.634 253.072 197.634 cv
266.689 197.634 li
267.902 197.634 268.885 198.617 268.885 199.83 cv
268.885 201.043 267.902 202.026 266.689 202.026 cv
cp
.501961 .501961 .501961 rgb
f
266.689 211.982 mo
253.072 211.982 li
251.86 211.982 250.877 210.999 250.877 209.786 cv
250.877 208.573 251.86 207.59 253.072 207.59 cv
266.689 207.59 li
267.902 207.59 268.885 208.573 268.885 209.786 cv
268.885 210.999 267.902 211.982 266.689 211.982 cv
cp
f
266.689 221.938 mo
253.072 221.938 li
251.86 221.938 250.877 220.955 250.877 219.742 cv
250.877 218.529 251.86 217.546 253.072 217.546 cv
266.689 217.546 li
267.902 217.546 268.885 218.529 268.885 219.742 cv
268.885 220.955 267.902 221.938 266.689 221.938 cv
cp
f
266.689 231.894 mo
253.072 231.894 li
251.86 231.894 250.877 230.911 250.877 229.698 cv
250.877 228.485 251.86 227.502 253.072 227.502 cv
266.689 227.502 li
267.902 227.502 268.885 228.485 268.885 229.698 cv
268.885 230.911 267.902 231.894 266.689 231.894 cv
cp
f
266.689 201.147 mo
253.072 201.147 li
251.86 201.147 250.877 200.164 250.877 198.951 cv
250.877 197.739 251.86 196.755 253.072 196.755 cv
266.689 196.755 li
267.902 196.755 268.885 197.739 268.885 198.951 cv
268.885 200.164 267.902 201.147 266.689 201.147 cv
cp
.301961 .301961 .301961 rgb
f
266.689 211.103 mo
253.072 211.103 li
251.86 211.103 250.877 210.12 250.877 208.907 cv
250.877 207.694 251.86 206.711 253.072 206.711 cv
266.689 206.711 li
267.902 206.711 268.885 207.694 268.885 208.907 cv
268.885 210.12 267.902 211.103 266.689 211.103 cv
cp
f
266.689 221.059 mo
253.072 221.059 li
251.86 221.059 250.877 220.076 250.877 218.863 cv
250.877 217.65 251.86 216.667 253.072 216.667 cv
266.689 216.667 li
267.902 216.667 268.885 217.65 268.885 218.863 cv
268.885 220.076 267.902 221.059 266.689 221.059 cv
cp
f
266.689 231.015 mo
253.072 231.015 li
251.86 231.015 250.877 230.032 250.877 228.819 cv
250.877 227.606 251.86 226.623 253.072 226.623 cv
266.689 226.623 li
267.902 226.623 268.885 227.606 268.885 228.819 cv
268.885 230.032 267.902 231.015 266.689 231.015 cv
cp
f
grestore
288.053 248.176 mo
287.947 248.176 287.84 248.157 287.735 248.116 cv
287.282 247.94 287.059 247.431 287.235 246.978 cv
287.69 245.81 287.921 244.578 287.921 243.314 cv
287.921 241.932 287.647 240.592 287.105 239.332 cv
286.914 238.886 287.12 238.369 287.566 238.178 cv
288.012 237.988 288.528 238.192 288.72 238.639 cv
289.355 240.12 289.677 241.693 289.677 243.314 cv
289.677 244.796 289.406 246.244 288.872 247.616 cv
288.736 247.963 288.405 248.176 288.053 248.176 cv
cp
.501961 .501961 .501961 rgb
f
252.194 228.819 mo
232.868 228.819 li
232.868 198.951 li
252.194 198.951 li
252.194 228.819 li
cp
.211765 .211765 .211765 rgb
f
gsave
252.194 228.819 mo
232.868 228.819 li
232.868 198.951 li
252.194 198.951 li
252.194 228.819 li
cp
clp
242.092 206.787 mo
229.794 206.787 li
228.581 206.787 227.598 205.804 227.598 204.591 cv
227.598 203.378 228.581 202.395 229.794 202.395 cv
242.092 202.395 li
243.305 202.395 244.288 203.378 244.288 204.591 cv
244.288 205.804 243.305 206.787 242.092 206.787 cv
cp
.301961 .301961 .301961 rgb
f
242.092 215.642 mo
229.794 215.642 li
228.581 215.642 227.598 214.659 227.598 213.446 cv
227.598 212.233 228.581 211.25 229.794 211.25 cv
242.092 211.25 li
243.305 211.25 244.288 212.233 244.288 213.446 cv
244.288 214.659 243.305 215.642 242.092 215.642 cv
cp
f
242.092 224.497 mo
229.794 224.497 li
228.581 224.497 227.598 223.514 227.598 222.301 cv
227.598 221.088 228.581 220.105 229.794 220.105 cv
242.092 220.105 li
243.305 220.105 244.288 221.088 244.288 222.301 cv
244.288 223.514 243.305 224.497 242.092 224.497 cv
cp
f
grestore
232.865 198.951 mo
232.865 228.819 li
218.81 222.301 li
213.539 219.859 li
213.539 207.912 li
218.81 205.47 li
232.865 198.951 li
cp
f
252.194 227.062 mo
257.465 227.062 li
257.465 200.708 li
252.194 200.708 li
252.194 227.062 li
cp
.6 .6 .6 rgb
f
218.81 205.47 mo
218.81 208.86 li
213.539 211.259 li
213.539 207.912 li
218.81 205.47 li
cp
f
213.539 213.016 mo
218.81 211.338 li
218.81 222.301 li
213.539 219.859 li
213.539 213.016 li
cp
f
213.539 209.938 mo
209.147 209.938 li
209.147 213.012 li
213.539 213.012 li
213.539 209.938 li
cp
f
209.147 214.769 mo
209.147 217.844 li
213.539 217.844 li
213.539 214.769 li
209.147 214.769 li
cp
f
351.058 214.764 mo
350.573 214.764 350.18 214.371 350.18 213.885 cv
350.18 207.657 346.834 201.837 341.446 198.696 cv
341.027 198.452 340.885 197.914 341.13 197.495 cv
341.374 197.076 341.913 196.934 342.331 197.179 cv
348.256 200.633 351.936 207.035 351.936 213.885 cv
351.936 214.371 351.543 214.764 351.058 214.764 cv
cp
f
323.507 286.578 mo
321.279 286.578 319.404 284.91 319.145 282.697 cv
314.254 240.97 li
314.108 239.725 314.501 238.476 315.334 237.539 cv
316.168 236.602 317.362 236.066 318.616 236.066 cv
334.257 236.066 li
334.257 191.704 li
272.985 191.704 li
272.985 236.066 li
303.579 236.066 li
305.807 236.066 307.682 237.735 307.942 239.947 cv
312.833 281.674 li
312.979 282.92 312.586 284.168 311.752 285.105 cv
310.919 286.042 309.725 286.578 308.471 286.578 cv
273.865 286.578 li
269.983 286.578 266.837 289.724 266.837 293.606 cv
266.837 305.904 li
334.631 305.904 li
334.631 286.578 li
323.507 286.578 li
cp
.968627 .694118 .05098 rgb
f
330.031 301.805 mo
274.522 301.805 li
274.522 291.409 li
330.031 291.409 li
330.031 301.805 li
cp
.819608 .545098 0 rgb
f
347.544 213.885 mo
347.544 222.133 340.858 228.819 332.61 228.819 cv
324.362 228.819 317.676 222.133 317.676 213.885 cv
317.676 205.638 324.362 198.951 332.61 198.951 cv
340.858 198.951 347.544 205.638 347.544 213.885 cv
cp
.968627 .694118 .05098 rgb
f
gsave
332.61 226.184 mo
339.402 226.184 344.909 220.678 344.909 213.885 cv
344.909 207.093 339.402 201.587 332.61 201.587 cv
332.61 226.184 li
cp
clp
346.941 205.101 mo
332.61 205.101 li
332.61 201.587 li
346.941 201.587 li
346.941 205.101 li
cp
.211765 .211765 .211765 rgb
f
346.941 212.128 mo
332.61 212.128 li
332.61 208.615 li
346.941 208.615 li
346.941 212.128 li
cp
f
346.941 219.156 mo
332.61 219.156 li
332.61 215.642 li
346.941 215.642 li
346.941 219.156 li
cp
f
346.941 226.184 mo
332.61 226.184 li
332.61 222.67 li
346.941 222.67 li
346.941 226.184 li
cp
f
grestore
323.213 282.301 mo
322.554 282.301 321.985 281.806 321.905 281.136 cv
318.236 249.835 li
318.151 249.113 318.668 248.458 319.391 248.373 cv
320.103 248.289 320.768 248.806 320.854 249.529 cv
324.523 280.829 li
324.608 281.552 324.091 282.207 323.368 282.292 cv
323.316 282.298 323.264 282.301 323.213 282.301 cv
cp
.501961 .501961 .501961 rgb
f
330.239 198.732 mo
279.353 198.732 li
278.626 198.732 278.035 198.142 278.035 197.414 cv
278.035 196.687 278.626 196.097 279.353 196.097 cv
330.239 196.097 li
330.966 196.097 331.556 196.687 331.556 197.414 cv
331.556 198.142 330.966 198.732 330.239 198.732 cv
cp
.952941 .870588 .611765 rgb
f
329.152 293.386 mo
274.961 293.386 li
274.234 293.386 273.644 292.796 273.644 292.068 cv
273.644 291.341 274.234 290.75 274.961 290.75 cv
329.152 290.75 li
329.88 290.75 330.47 291.341 330.47 292.068 cv
330.47 292.796 329.88 293.386 329.152 293.386 cv
cp
f
288.195 198.073 mo
288.195 199.529 287.015 200.708 285.56 200.708 cv
284.104 200.708 282.924 199.529 282.924 198.073 cv
282.924 196.618 284.104 195.438 285.56 195.438 cv
287.015 195.438 288.195 196.618 288.195 198.073 cv
cp
f
287.756 197.414 mo
287.756 198.627 286.773 199.61 285.56 199.61 cv
284.347 199.61 283.364 198.627 283.364 197.414 cv
283.364 196.201 284.347 195.218 285.56 195.218 cv
286.773 195.218 287.756 196.201 287.756 197.414 cv
cp
.211765 .211765 .211765 rgb
f
276.718 292.947 mo
276.718 294.402 275.538 295.582 274.083 295.582 cv
272.627 295.582 271.447 294.402 271.447 292.947 cv
271.447 291.491 272.627 290.311 274.083 290.311 cv
275.538 290.311 276.718 291.491 276.718 292.947 cv
cp
.952941 .870588 .611765 rgb
f
276.279 292.288 mo
276.279 293.501 275.296 294.484 274.083 294.484 cv
272.87 294.484 271.887 293.501 271.887 292.288 cv
271.887 291.075 272.87 290.092 274.083 290.092 cv
275.296 290.092 276.279 291.075 276.279 292.288 cv
cp
.211765 .211765 .211765 rgb
f
328.274 198.073 mo
328.274 199.529 327.094 200.708 325.638 200.708 cv
324.183 200.708 323.003 199.529 323.003 198.073 cv
323.003 196.618 324.183 195.438 325.638 195.438 cv
327.094 195.438 328.274 196.618 328.274 198.073 cv
cp
.952941 .870588 .611765 rgb
f
327.835 197.414 mo
327.835 198.627 326.851 199.61 325.638 199.61 cv
324.425 199.61 323.442 198.627 323.442 197.414 cv
323.442 196.201 324.425 195.218 325.638 195.218 cv
326.851 195.218 327.835 196.201 327.835 197.414 cv
cp
.211765 .211765 .211765 rgb
f
327.395 224.058 mo
279.353 224.058 li
279.353 204.591 li
327.395 204.591 li
327.395 224.058 li
cp
.819608 .545098 0 rgb
f
290.261 231.784 mo
282.794 231.784 li
281.581 231.784 280.598 230.801 280.598 229.588 cv
280.598 228.375 281.581 227.392 282.794 227.392 cv
290.261 227.392 li
291.474 227.392 292.457 228.375 292.457 229.588 cv
292.457 230.801 291.474 231.784 290.261 231.784 cv
cp
.952941 .870588 .611765 rgb
f
290.261 230.905 mo
282.794 230.905 li
281.581 230.905 280.598 229.922 280.598 228.709 cv
280.598 227.496 281.581 226.513 282.794 226.513 cv
290.261 226.513 li
291.474 226.513 292.457 227.496 292.457 228.709 cv
292.457 229.922 291.474 230.905 290.261 230.905 cv
cp
.211765 .211765 .211765 rgb
f
257.465 206.858 mo
252.194 206.858 li
252.194 203.344 li
257.465 203.344 li
257.465 206.858 li
cp
.8 .8 .8 rgb
f
257.465 211.759 mo
252.194 211.759 li
252.194 209.124 li
257.465 209.124 li
257.465 211.759 li
cp
f
218.81 208.86 mo
218.81 211.338 li
213.539 213.016 li
213.539 211.259 li
218.81 208.86 li
cp
f
232.865 202.465 mo
232.865 206.858 li
218.81 211.338 li
218.81 208.86 li
232.865 202.465 li
cp
.6 .6 .6 rgb
f
218.81 220.026 mo
218.81 216.969 li
213.539 216.969 li
213.539 217.628 li
218.81 220.026 li
cp
.8 .8 .8 rgb
f
232.865 226.421 mo
232.865 216.969 li
218.81 216.969 li
218.81 220.026 li
232.865 226.421 li
cp
.301961 .301961 .301961 rgb
f
330.239 210.938 mo
276.279 210.938 li
276.279 209.181 li
330.239 209.181 li
330.239 210.938 li
cp
.968627 .694118 .05098 rgb
f
139.554 292.94 mo
53.2788 292.94 li
47.9059 292.94 43.5347 288.568 43.5347 283.195 cv
43.5347 277.821 47.9059 273.45 53.2788 273.45 cv
98.8801 273.45 li
102.852 273.45 106.083 270.219 106.083 266.247 cv
106.083 262.275 102.852 259.045 98.8801 259.045 cv
38.2383 259.045 li
32.865 259.045 28.4937 254.674 28.4937 249.3 cv
28.4937 243.927 32.865 239.556 38.2383 239.556 cv
46.712 239.556 li
46.712 242.098 li
38.2383 242.098 li
34.2668 242.098 31.0353 245.329 31.0353 249.3 cv
31.0353 253.272 34.2668 256.502 38.2383 256.502 cv
98.8801 256.502 li
104.253 256.502 108.625 260.874 108.625 266.247 cv
108.625 271.621 104.253 275.992 98.8801 275.992 cv
53.2788 275.992 li
49.3073 275.992 46.0763 279.223 46.0763 283.195 cv
46.0763 287.167 49.3073 290.397 53.2788 290.397 cv
139.554 290.397 li
139.554 292.94 li
cp
.6 .6 .6 rgb
f
158.902 287.309 mo
149.723 287.309 li
149.021 287.309 148.452 286.74 148.452 286.038 cv
148.452 285.336 149.021 284.767 149.723 284.767 cv
158.902 284.767 li
159.604 284.767 160.173 285.336 160.173 286.038 cv
160.173 286.74 159.604 287.309 158.902 287.309 cv
cp
.501961 .501961 .501961 rgb
f
158.902 298.571 mo
149.723 298.571 li
149.021 298.571 148.452 298.002 148.452 297.3 cv
148.452 296.598 149.021 296.029 149.723 296.029 cv
158.902 296.029 li
159.604 296.029 160.173 296.598 160.173 297.3 cv
160.173 298.002 159.604 298.571 158.902 298.571 cv
cp
f
148.028 300.142 mo
139.554 300.142 li
134.874 300.142 131.08 296.348 131.08 291.669 cv
131.08 286.989 134.874 283.195 139.554 283.195 cv
148.028 283.195 li
148.028 300.142 li
cp
.968627 .694118 .05098 rgb
f
139.554 297.6 mo
136.283 297.6 133.622 294.939 133.622 291.668 cv
133.622 288.398 136.283 285.737 139.554 285.737 cv
145.486 285.737 li
145.486 297.6 li
139.554 297.6 li
cp
.819608 .545098 0 rgb
f
151.417 301.413 mo
148.028 301.413 li
148.028 281.924 li
151.417 281.924 li
151.417 301.413 li
cp
f
137.927 291.936 mo
137.927 293.059 138.838 293.97 139.961 293.97 cv
141.084 293.97 141.994 293.059 141.994 291.936 cv
141.994 290.813 141.084 289.902 139.961 289.902 cv
138.838 289.902 137.927 290.813 137.927 291.936 cv
cp
.952941 .870588 .611765 rgb
f
138.266 291.427 mo
138.266 292.363 139.025 293.122 139.961 293.122 cv
140.897 293.122 141.655 292.363 141.655 291.427 cv
141.655 290.491 140.897 289.733 139.961 289.733 cv
139.025 289.733 138.266 290.491 138.266 291.427 cv
cp
.211765 .211765 .211765 rgb
f
291.845 160.418 mo
210.801 160.418 li
210.801 154.637 li
291.845 154.637 li
295.819 157.528 li
291.845 160.418 li
cp
.501961 .501961 .501961 rgb
f
gsave
291.845 160.418 mo
210.801 160.418 li
210.801 154.637 li
291.845 154.637 li
295.819 157.528 li
291.845 160.418 li
cp
clp
231.834 169.786 mo
228.674 167.581 li
243.314 146.594 li
246.475 148.799 li
231.834 169.786 li
cp
.8 .8 .8 rgb
f
243.985 169.786 mo
240.824 167.581 li
255.465 146.594 li
258.625 148.799 li
243.985 169.786 li
cp
f
256.135 169.786 mo
252.975 167.581 li
267.616 146.594 li
270.776 148.799 li
256.135 169.786 li
cp
f
268.286 169.786 mo
265.126 167.581 li
279.766 146.594 li
282.926 148.799 li
268.286 169.786 li
cp
f
280.436 169.786 mo
277.276 167.581 li
291.917 146.594 li
295.077 148.799 li
280.436 169.786 li
cp
f
grestore
170.219 189.759 mo
160.585 189.759 li
160.585 181.367 li
150.952 181.367 li
150.952 189.759 li
141.318 189.759 li
141.318 194.169 li
145.948 194.169 li
146.767 194.169 147.548 194.517 148.097 195.127 cv
148.645 195.736 148.907 196.55 148.822 197.365 cv
147.851 206.589 147.58 214.216 147.58 221.827 cv
147.58 230.436 147.927 239.066 149.241 250.005 cv
144.31 250.005 li
144.31 256.267 li
167.228 256.267 li
167.228 250.005 li
162.296 250.005 li
163.611 239.066 163.957 230.436 163.957 221.827 cv
163.957 214.216 163.686 206.589 162.716 197.365 cv
162.63 196.551 162.894 195.738 163.442 195.129 cv
163.99 194.52 164.771 194.169 165.59 194.169 cv
170.219 194.169 li
170.219 189.759 li
cp
.211765 .211765 .211765 rgb
f
159.181 242.619 mo
158.648 242.619 158.217 242.189 158.217 241.656 cv
158.217 200.638 li
158.217 200.106 158.648 199.675 159.181 199.675 cv
159.713 199.675 160.144 200.106 160.144 200.638 cv
160.144 241.656 li
160.144 242.189 159.713 242.619 159.181 242.619 cv
cp
.501961 .501961 .501961 rgb
f
160.585 189.759 mo
150.952 189.759 li
150.952 181.367 li
160.585 181.367 li
160.585 189.759 li
cp
f
159.181 189.759 mo
156.973 189.759 li
156.973 181.367 li
159.181 181.367 li
159.181 189.759 li
cp
.8 .8 .8 rgb
f
47.206 237.247 mo
47.5924 237.247 li
51.5017 237.247 54.7918 234.32 55.247 230.437 cv
59.6815 192.608 li
60.0018 189.876 59.1391 187.138 57.311 185.083 cv
55.4829 183.028 52.8637 181.853 50.1133 181.853 cv
47.6159 181.853 li
34.1815 181.853 23.2907 170.962 23.2907 157.528 cv
23.2907 144.093 34.1815 133.202 47.6159 133.202 cv
147.318 133.202 li
164.337 133.202 li
164.337 181.847 li
147.318 181.853 li
106.075 181.853 li
102.998 183.184 100.84 186.235 100.84 189.801 cv
100.84 192.67 102.241 195.207 104.389 196.785 cv
96.4568 196.785 li
94.0135 196.785 91.9572 198.614 91.6727 201.041 cv
88.4371 228.643 li
88.1809 230.828 88.871 233.018 90.3335 234.662 cv
91.796 236.306 93.8914 237.247 96.0917 237.247 cv
47.206 237.247 li
cp
.211765 .211765 .211765 rgb
f
98.2856 195.133 mo
97.9004 195.133 97.5366 194.899 97.3882 194.519 cv
96.8022 193.017 96.5054 191.429 96.5054 189.801 cv
96.5054 188.021 96.8584 186.297 97.5547 184.674 cv
97.7651 184.186 98.3311 183.959 98.8198 184.169 cv
99.3086 184.379 99.5352 184.945 99.3252 185.434 cv
98.7324 186.815 98.4321 188.284 98.4321 189.801 cv
98.4321 191.189 98.6851 192.54 99.1831 193.819 cv
99.3765 194.315 99.1313 194.873 98.6357 195.066 cv
98.5205 195.111 98.4023 195.133 98.2856 195.133 cv
cp
.501961 .501961 .501961 rgb
f
170.118 173.905 mo
191.312 173.905 li
191.312 141.15 li
170.118 141.15 li
170.118 173.905 li
cp
.211765 .211765 .211765 rgb
f
gsave
170.118 173.905 mo
191.312 173.905 li
191.312 141.15 li
170.118 141.15 li
170.118 173.905 li
cp
clp
194.684 149.743 mo
181.196 149.743 li
179.866 149.743 178.788 148.665 178.788 147.335 cv
178.788 146.005 179.866 144.927 181.196 144.927 cv
194.684 144.927 li
196.014 144.927 197.092 146.005 197.092 147.335 cv
197.092 148.665 196.014 149.743 194.684 149.743 cv
cp
.301961 .301961 .301961 rgb
f
194.684 159.454 mo
181.196 159.454 li
179.866 159.454 178.788 158.376 178.788 157.046 cv
178.788 155.716 179.866 154.638 181.196 154.638 cv
194.684 154.638 li
196.014 154.638 197.092 155.716 197.092 157.046 cv
197.092 158.376 196.014 159.454 194.684 159.454 cv
cp
f
194.684 169.165 mo
181.196 169.165 li
179.866 169.165 178.788 168.087 178.788 166.757 cv
178.788 165.427 179.866 164.349 181.196 164.349 cv
194.684 164.349 li
196.014 164.349 197.092 165.427 197.092 166.757 cv
197.092 168.087 196.014 169.165 194.684 169.165 cv
cp
f
grestore
191.315 141.15 mo
191.315 173.905 li
206.729 166.757 li
212.509 164.079 li
212.509 150.977 li
206.729 148.298 li
191.315 141.15 li
cp
f
170.118 171.978 mo
164.337 171.978 li
164.337 143.077 li
170.118 143.077 li
170.118 171.978 li
cp
.6 .6 .6 rgb
f
206.729 148.298 mo
206.729 152.017 li
212.509 154.647 li
212.509 150.977 li
206.729 148.298 li
cp
f
212.509 156.574 mo
206.729 154.734 li
206.729 166.757 li
212.509 164.079 li
212.509 156.574 li
cp
f
212.509 153.198 mo
217.326 153.198 li
217.326 156.57 li
212.509 156.57 li
212.509 153.198 li
cp
f
217.326 158.497 mo
217.326 161.869 li
212.509 161.869 li
212.509 158.497 li
217.326 158.497 li
cp
f
29.1914 158.491 mo
28.6592 158.491 28.228 158.06 28.228 157.528 cv
28.228 150.015 32.2642 142.995 38.7612 139.206 cv
39.2222 138.939 39.8115 139.094 40.0786 139.553 cv
40.3467 140.013 40.1914 140.603 39.7319 140.871 cv
33.8247 144.315 30.1548 150.698 30.1548 157.528 cv
30.1548 158.06 29.7236 158.491 29.1914 158.491 cv
cp
f
59.4047 237.247 mo
61.848 237.247 63.9043 235.417 64.1888 232.991 cv
69.553 187.23 li
69.7131 185.865 69.2818 184.495 68.3678 183.468 cv
67.4537 182.441 66.1441 181.853 64.7689 181.853 cv
47.6159 181.853 li
47.6159 133.202 li
147.318 133.202 li
147.318 181.853 li
81.2592 181.853 li
78.8158 181.853 76.7595 183.682 76.475 186.109 cv
71.1107 231.869 li
70.9506 233.235 71.3819 234.604 72.296 235.632 cv
73.21 236.659 74.5196 237.247 75.8948 237.247 cv
96.5394 237.247 li
100.796 237.247 104.246 240.697 104.246 244.954 cv
104.246 244.867 li
47.206 244.867 li
47.206 237.247 li
59.4047 237.247 li
cp
.968627 .694118 .05098 rgb
f
33.0449 157.528 mo
33.0449 166.573 40.3773 173.905 49.4222 173.905 cv
58.4672 173.905 65.7996 166.573 65.7996 157.528 cv
65.7996 148.483 58.4672 141.15 49.4222 141.15 cv
40.3773 141.15 33.0449 148.483 33.0449 157.528 cv
cp
f
gsave
49.4222 171.015 mo
41.9735 171.015 35.935 164.976 35.935 157.528 cv
35.935 150.079 41.9735 144.04 49.4222 144.04 cv
49.4222 171.015 li
cp
clp
33.7062 147.894 mo
49.4222 147.894 li
49.4222 144.04 li
33.7062 144.04 li
33.7062 147.894 li
cp
.211765 .211765 .211765 rgb
f
33.7062 155.601 mo
49.4222 155.601 li
49.4222 151.747 li
33.7062 151.747 li
33.7062 155.601 li
cp
f
33.7062 163.308 mo
49.4222 163.308 li
49.4222 159.454 li
33.7062 159.454 li
33.7062 163.308 li
cp
f
33.7062 171.015 mo
49.4222 171.015 li
49.4222 167.161 li
33.7062 167.161 li
33.7062 171.015 li
cp
f
grestore
59.7285 232.557 mo
59.6724 232.557 59.6157 232.554 59.5581 232.547 cv
58.7656 232.454 58.1982 231.735 58.2915 230.943 cv
62.3154 196.616 li
62.4082 195.824 63.124 195.257 63.9189 195.35 cv
64.7114 195.442 65.2788 196.16 65.1855 196.953 cv
61.1616 231.279 li
61.0757 232.015 60.4512 232.557 59.7285 232.557 cv
cp
.501961 .501961 .501961 rgb
f
141.778 139.464 mo
141.778 140.262 141.131 140.909 140.333 140.909 cv
52.0229 140.909 li
51.2251 140.909 50.5781 140.262 50.5781 139.464 cv
50.5781 138.667 51.2251 138.02 52.0229 138.02 cv
140.333 138.02 li
141.131 138.02 141.778 138.667 141.778 139.464 cv
cp
.952941 .870588 .611765 rgb
f
130.637 140.187 mo
130.637 141.783 131.931 143.077 133.527 143.077 cv
135.123 143.077 136.417 141.783 136.417 140.187 cv
136.417 138.591 135.123 137.297 133.527 137.297 cv
131.931 137.297 130.637 138.591 130.637 140.187 cv
cp
f
131.119 139.464 mo
131.119 140.794 132.197 141.873 133.527 141.873 cv
134.857 141.873 135.935 140.794 135.935 139.464 cv
135.935 138.134 134.857 137.056 133.527 137.056 cv
132.197 137.056 131.119 138.134 131.119 139.464 cv
cp
.211765 .211765 .211765 rgb
f
54.1777 140.187 mo
54.1777 141.783 55.4717 143.077 57.0678 143.077 cv
58.664 143.077 59.9579 141.783 59.9579 140.187 cv
59.9579 138.591 58.664 137.297 57.0678 137.297 cv
55.4717 137.297 54.1777 138.591 54.1777 140.187 cv
cp
.952941 .870588 .611765 rgb
f
54.6594 139.464 mo
54.6594 140.794 55.7377 141.873 57.0678 141.873 cv
58.398 141.873 59.4763 140.794 59.4763 139.464 cv
59.4763 138.134 58.398 137.056 57.0678 137.056 cv
55.7377 137.056 54.6594 138.134 54.6594 139.464 cv
cp
.211765 .211765 .211765 rgb
f
55.1411 168.683 mo
140.333 168.683 li
140.333 147.335 li
55.1411 147.335 li
55.1411 168.683 li
cp
.819608 .545098 0 rgb
f
96.0537 179.156 mo
87.8647 179.156 li
86.5347 179.156 85.4565 178.078 85.4565 176.748 cv
85.4565 175.418 86.5347 174.34 87.8647 174.34 cv
96.0537 174.34 li
97.3838 174.34 98.4619 175.418 98.4619 176.748 cv
98.4619 178.078 97.3838 179.156 96.0537 179.156 cv
cp
.952941 .870588 .611765 rgb
f
96.0537 178.193 mo
87.8647 178.193 li
86.5347 178.193 85.4565 177.115 85.4565 175.785 cv
85.4565 174.455 86.5347 173.376 87.8647 173.376 cv
96.0537 173.376 li
97.3838 173.376 98.4619 174.455 98.4619 175.785 cv
98.4619 177.115 97.3838 178.193 96.0537 178.193 cv
cp
.211765 .211765 .211765 rgb
f
164.337 149.821 mo
170.118 149.821 li
170.118 145.967 li
164.337 145.967 li
164.337 149.821 li
cp
.8 .8 .8 rgb
f
164.337 155.196 mo
170.118 155.196 li
170.118 152.306 li
164.337 152.306 li
164.337 155.196 li
cp
f
206.729 152.017 mo
206.729 154.734 li
212.509 156.574 li
212.509 154.647 li
206.729 152.017 li
cp
f
191.315 145.004 mo
191.315 149.821 li
206.729 154.734 li
206.729 152.017 li
191.315 145.004 li
cp
.6 .6 .6 rgb
f
206.729 164.262 mo
206.729 160.909 li
212.509 160.909 li
212.509 161.632 li
206.729 164.262 li
cp
.8 .8 .8 rgb
f
191.315 171.275 mo
191.315 160.909 li
206.729 160.909 li
206.729 164.262 li
191.315 171.275 li
cp
.301961 .301961 .301961 rgb
f
143.705 154.295 mo
52.0229 154.295 li
52.0229 152.369 li
143.705 152.369 li
143.705 154.295 li
cp
.968627 .694118 .05098 rgb
f
400.345 225.313 mo
392.638 225.313 li
392.638 165.583 li
400.345 165.583 li
400.345 225.313 li
cp
.509804 .878431 .027451 rgb
f
397.455 225.313 mo
394.564 225.313 li
394.564 165.583 li
397.455 165.583 li
397.455 225.313 li
cp
.678431 .929412 .345098 rgb
f
408.05 115.76 mo
400.6 115.76 394.56 109.72 394.56 102.27 cv
394.56 94.82 400.6 88.78 408.05 88.78 cv
415.5 88.78 421.54 94.82 421.54 102.27 cv
421.54 109.72 415.5 115.76 408.05 115.76 cv
cp
408.05 291.79 mo
400.6 291.79 394.56 285.75 394.56 278.3 cv
394.56 270.85 400.6 264.81 408.05 264.81 cv
415.5 264.81 421.54 270.85 421.54 278.3 cv
421.54 285.75 415.5 291.79 408.05 291.79 cv
cp
388.78 62.15 mo
388.78 171.02 li
396.49 171.02 li
402.87 171.02 408.05 176.2 408.05 182.58 cv
408.05 197.99 li
408.05 204.36 402.87 209.55 396.49 209.55 cv
388.78 209.55 li
388.78 318.41 li
427.32 318.41 li
427.32 62.15 li
388.78 62.15 li
cp
.968627 .694118 .05098 rgb
f
gsave
408.052 264.811 mo
400.603 264.811 394.565 270.849 394.565 278.298 cv
394.565 285.747 400.603 291.785 408.052 291.785 cv
415.501 291.785 421.539 285.747 421.539 278.298 cv
421.539 270.849 415.501 264.811 408.052 264.811 cv
cp
408.052 88.7816 mo
400.603 88.7816 394.565 94.8201 394.565 102.269 cv
394.565 109.718 400.603 115.756 408.052 115.756 cv
415.501 115.756 421.539 109.718 421.539 102.269 cv
421.539 94.8201 415.501 88.7816 408.052 88.7816 cv
cp
427.319 62.1548 mo
427.319 190.283 li
427.319 318.412 li
388.785 318.412 li
388.785 209.551 li
396.492 209.551 li
402.866 209.551 408.052 204.365 408.052 197.99 cv
408.052 182.576 li
408.052 176.202 402.866 171.016 396.492 171.016 cv
388.785 171.016 li
388.785 62.1548 li
427.319 62.1548 li
cp
clp
397.455 312.417 mo
393.602 312.417 li
393.602 64.0815 li
397.455 64.0815 li
397.455 312.417 li
cp
.819608 .545098 0 rgb
f
405.804 312.417 mo
401.951 312.417 li
401.951 64.0815 li
405.804 64.0815 li
405.804 312.417 li
cp
f
414.154 312.417 mo
410.3 312.417 li
410.3 64.0815 li
414.154 64.0815 li
414.154 312.417 li
cp
f
422.503 312.417 mo
418.649 312.417 li
418.649 64.0815 li
422.503 64.0815 li
422.503 312.417 li
cp
f
grestore
422.503 76.6053 mo
393.601 76.6053 li
393.601 62.1548 li
422.503 62.1548 li
422.503 76.6053 li
cp
.211765 .211765 .211765 rgb
f
422.503 318.412 mo
393.601 318.412 li
393.601 303.961 li
422.503 303.961 li
422.503 318.412 li
cp
f
396.492 171.016 mo
388.785 171.016 li
388.785 175.833 li
396.492 175.833 li
400.216 175.833 403.235 178.852 403.235 182.576 cv
403.235 197.99 li
403.235 201.715 400.216 204.734 396.492 204.734 cv
388.785 204.734 li
388.785 209.551 li
396.492 209.551 li
402.866 209.551 408.052 204.365 408.052 197.99 cv
408.052 182.576 li
408.052 176.202 402.866 171.016 396.492 171.016 cv
cp
f
411.905 291.785 mo
404.198 291.785 li
404.198 264.81 li
411.905 264.81 li
411.905 291.785 li
cp
.509804 .878431 .027451 rgb
f
408.534 291.785 mo
405.644 291.785 li
405.644 264.81 li
408.534 264.81 li
408.534 291.785 li
cp
.678431 .929412 .345098 rgb
f
408.052 267.219 mo
401.942 267.219 396.973 272.189 396.973 278.298 cv
396.973 284.407 401.942 289.377 408.052 289.377 cv
414.161 289.377 419.131 284.407 419.131 278.298 cv
419.131 272.189 414.161 267.219 408.052 267.219 cv
cp
408.052 294.193 mo
399.287 294.193 392.156 287.063 392.156 278.298 cv
392.156 269.533 399.287 262.402 408.052 262.402 cv
416.816 262.402 423.947 269.533 423.947 278.298 cv
423.947 287.063 416.816 294.193 408.052 294.193 cv
cp
.211765 .211765 .211765 rgb
f
421.539 106.123 mo
394.564 106.123 li
394.564 98.4155 li
421.539 98.4155 li
421.539 106.123 li
cp
.509804 .878431 .027451 rgb
f
421.539 102.751 mo
394.564 102.751 li
394.564 99.8608 li
421.539 99.8608 li
421.539 102.751 li
cp
.678431 .929412 .345098 rgb
f
408.052 91.1899 mo
401.942 91.1899 396.973 96.1602 396.973 102.269 cv
396.973 108.377 401.942 113.348 408.052 113.348 cv
414.161 113.348 419.131 108.377 419.131 102.269 cv
419.131 96.1602 414.161 91.1899 408.052 91.1899 cv
cp
408.052 118.164 mo
399.287 118.164 392.156 111.034 392.156 102.269 cv
392.156 93.5039 399.287 86.3735 408.052 86.3735 cv
416.816 86.3735 423.947 93.5039 423.947 102.269 cv
423.947 111.034 416.816 118.164 408.052 118.164 cv
cp
.211765 .211765 .211765 rgb
f
400.299 378.063 mo
400.299 383.874 395.572 388.602 389.761 388.602 cv
324.18 388.602 li
324.18 385.852 li
389.761 385.852 li
394.056 385.852 397.55 382.358 397.55 378.063 cv
397.55 373.768 394.056 370.274 389.761 370.274 cv
340.445 370.274 li
334.634 370.274 329.906 365.547 329.906 359.735 cv
329.906 353.924 334.634 349.197 340.445 349.197 cv
398.615 349.197 li
398.615 351.946 li
340.445 351.946 li
336.15 351.946 332.656 355.44 332.656 359.735 cv
332.656 364.031 336.15 367.524 340.445 367.524 cv
389.761 367.524 li
395.572 367.524 400.299 372.252 400.299 378.063 cv
cp
.6 .6 .6 rgb
f
419.539 358.036 mo
409.612 358.036 li
408.853 358.036 408.237 357.42 408.237 356.661 cv
408.237 355.903 408.853 355.287 409.612 355.287 cv
419.539 355.287 li
420.298 355.287 420.914 355.903 420.914 356.661 cv
420.914 357.42 420.298 358.036 419.539 358.036 cv
cp
.501961 .501961 .501961 rgb
f
419.539 345.856 mo
409.612 345.856 li
408.853 345.856 408.237 345.24 408.237 344.481 cv
408.237 343.722 408.853 343.107 409.612 343.107 cv
419.539 343.107 li
420.298 343.107 420.914 343.722 420.914 344.481 cv
420.914 345.24 420.298 345.856 419.539 345.856 cv
cp
f
407.779 341.408 mo
398.615 341.408 li
393.554 341.408 389.451 345.51 389.451 350.571 cv
389.451 355.632 393.554 359.735 398.615 359.735 cv
407.779 359.735 li
407.779 341.408 li
cp
.968627 .694118 .05098 rgb
f
398.615 344.157 mo
395.078 344.157 392.2 347.035 392.2 350.572 cv
392.2 354.108 395.078 356.986 398.615 356.986 cv
405.03 356.986 li
405.03 344.157 li
398.615 344.157 li
cp
.819608 .545098 0 rgb
f
411.444 340.033 mo
407.779 340.033 li
407.779 361.11 li
411.444 361.11 li
411.444 340.033 li
cp
f
396.856 350.282 mo
396.856 349.068 397.84 348.083 399.055 348.083 cv
400.27 348.083 401.254 349.068 401.254 350.282 cv
401.254 351.497 400.27 352.482 399.055 352.482 cv
397.84 352.482 396.856 351.497 396.856 350.282 cv
cp
.952941 .870588 .611765 rgb
f
397.222 350.832 mo
397.222 349.82 398.043 348.999 399.055 348.999 cv
400.067 348.999 400.888 349.82 400.888 350.832 cv
400.888 351.844 400.067 352.665 399.055 352.665 cv
398.043 352.665 397.222 351.844 397.222 350.832 cv
cp
.211765 .211765 .211765 rgb
f
164.894 389.083 mo
164.894 370.461 179.99 355.365 198.612 355.365 cv
217.234 355.365 232.33 370.461 232.33 389.083 cv
232.33 407.705 217.234 422.801 198.612 422.801 cv
179.99 422.801 164.894 407.705 164.894 389.083 cv
cp
.6 .6 .6 rgb
f
184.216 389.083 mo
184.216 381.368 190.47 375.114 198.185 375.114 cv
205.9 375.114 212.154 381.368 212.154 389.083 cv
212.154 396.798 205.9 403.052 198.185 403.052 cv
190.47 403.052 184.216 396.798 184.216 389.083 cv
cp
f
233.971 401.816 mo
228.754 416.299 214.892 426.654 198.612 426.654 cv
188.237 426.654 178.844 422.449 172.045 415.65 cv
198.612 389.083 li
233.971 401.816 li
cp
.301961 .301961 .301961 rgb
f
168.735 389.083 mo
168.735 372.818 181.92 359.633 198.185 359.633 cv
214.45 359.633 227.635 372.818 227.635 389.083 cv
227.635 405.348 214.45 418.533 198.185 418.533 cv
181.92 418.533 168.735 405.348 168.735 389.083 cv
cp
.8 .8 .8 rgb
f
198.612 424.245 mo
191.195 424.245 184.102 421.964 178.1 417.647 cv
177.667 417.336 177.569 416.733 177.88 416.302 cv
178.191 415.871 178.792 415.773 179.225 416.082 cv
184.897 420.162 191.601 422.319 198.612 422.319 cv
203.977 422.319 209.306 421.012 214.025 418.537 cv
214.497 418.292 215.079 418.473 215.325 418.943 cv
215.572 419.414 215.391 419.997 214.919 420.244 cv
209.926 422.862 204.287 424.245 198.612 424.245 cv
cp
.6 .6 .6 rgb
f
206.112 354.443 mo
215.746 354.443 li
215.746 362.835 li
225.38 362.835 li
225.38 354.443 li
235.013 354.443 li
235.013 350.033 li
230.384 350.033 li
229.564 350.033 228.783 349.685 228.235 349.075 cv
227.687 348.466 227.424 347.652 227.51 346.837 cv
228.481 337.613 228.751 329.986 228.751 322.375 cv
228.751 313.766 228.405 305.136 227.09 294.197 cv
232.021 294.197 li
232.021 287.935 li
209.104 287.935 li
209.104 294.197 li
214.035 294.197 li
212.72 305.136 212.374 313.766 212.374 322.375 cv
212.374 329.986 212.645 337.613 213.616 346.837 cv
213.701 347.651 213.437 348.464 212.889 349.073 cv
212.342 349.682 211.561 350.033 210.742 350.033 cv
206.112 350.033 li
206.112 354.443 li
cp
.211765 .211765 .211765 rgb
f
217.151 344.526 mo
216.619 344.526 216.187 344.096 216.187 343.564 cv
216.187 302.546 li
216.187 302.014 216.619 301.583 217.151 301.583 cv
217.683 301.583 218.114 302.014 218.114 302.546 cv
218.114 343.564 li
218.114 344.096 217.683 344.526 217.151 344.526 cv
cp
.501961 .501961 .501961 rgb
f
215.746 354.443 mo
225.38 354.443 li
225.38 362.835 li
215.746 362.835 li
215.746 354.443 li
cp
f
217.151 354.443 mo
219.358 354.443 li
219.358 362.835 li
217.151 362.835 li
217.151 354.443 li
cp
.8 .8 .8 rgb
f
298.447 362.349 mo
300.944 362.349 li
314.378 362.349 325.269 373.24 325.269 386.674 cv
325.269 400.109 314.378 411 300.944 411 cv
229.014 411 li
190.926 396.368 li
189.437 395.797 188.454 394.366 188.454 392.771 cv
188.454 373.914 li
188.454 367.53 193.629 362.354 200.013 362.353 cv
229.014 362.349 li
270.257 362.349 li
298.447 362.349 li
cp
.211765 .211765 .211765 rgb
f
309.314 405.128 mo
308.982 405.128 308.66 404.956 308.481 404.649 cv
308.213 404.19 308.368 403.6 308.828 403.332 cv
314.735 399.887 318.405 393.505 318.405 386.675 cv
318.405 386.143 318.836 385.712 319.368 385.712 cv
319.9 385.712 320.331 386.143 320.331 386.675 cv
320.331 394.188 316.296 401.208 309.799 404.996 cv
309.646 405.085 309.479 405.128 309.314 405.128 cv
cp
.6 .6 .6 rgb
f
229.014 362.349 mo
229.014 411 li
300.944 411 li
300.944 362.349 li
229.014 362.349 li
cp
.968627 .694118 .05098 rgb
f
315.515 386.674 mo
315.515 377.629 308.183 370.297 299.138 370.297 cv
290.093 370.297 282.76 377.629 282.76 386.674 cv
282.76 395.719 290.093 403.052 299.138 403.052 cv
308.183 403.052 315.515 395.719 315.515 386.674 cv
cp
f
gsave
299.138 373.187 mo
306.586 373.187 312.625 379.225 312.625 386.674 cv
312.625 394.123 306.586 400.162 299.138 400.162 cv
299.138 373.187 li
cp
clp
314.854 396.308 mo
299.138 396.308 li
299.138 400.162 li
314.854 400.162 li
314.854 396.308 li
cp
.211765 .211765 .211765 rgb
f
314.854 388.601 mo
299.138 388.601 li
299.138 392.455 li
314.854 392.455 li
314.854 388.601 li
cp
f
314.854 380.894 mo
299.138 380.894 li
299.138 384.748 li
314.854 384.748 li
314.854 380.894 li
cp
f
314.854 373.187 mo
299.138 373.187 li
299.138 377.041 li
314.854 377.041 li
314.854 373.187 li
cp
f
grestore
296.537 406.183 mo
235.998 406.183 li
235.2 406.183 234.553 405.535 234.553 404.737 cv
234.553 403.94 235.2 403.292 235.998 403.292 cv
296.537 403.292 li
297.335 403.292 297.982 403.94 297.982 404.737 cv
297.982 405.535 297.335 406.183 296.537 406.183 cv
cp
.952941 .870588 .611765 rgb
f
245.694 404.015 mo
245.694 402.419 244.4 401.125 242.804 401.125 cv
241.208 401.125 239.914 402.419 239.914 404.015 cv
239.914 405.611 241.208 406.905 242.804 406.905 cv
244.4 406.905 245.694 405.611 245.694 404.015 cv
cp
f
245.213 404.738 mo
245.213 403.407 244.134 402.329 242.804 402.329 cv
241.474 402.329 240.396 403.407 240.396 404.738 cv
240.396 406.068 241.474 407.146 242.804 407.146 cv
244.134 407.146 245.213 406.068 245.213 404.738 cv
cp
.211765 .211765 .211765 rgb
f
294.382 404.015 mo
294.382 402.419 293.088 401.125 291.492 401.125 cv
289.896 401.125 288.602 402.419 288.602 404.015 cv
288.602 405.611 289.896 406.905 291.492 406.905 cv
293.088 406.905 294.382 405.611 294.382 404.015 cv
cp
.952941 .870588 .611765 rgb
f
293.901 404.738 mo
293.901 403.407 292.822 402.329 291.492 402.329 cv
290.162 402.329 289.084 403.407 289.084 404.738 cv
289.084 406.068 290.162 407.146 291.492 407.146 cv
292.822 407.146 293.901 406.068 293.901 404.738 cv
cp
.211765 .211765 .211765 rgb
f
293.419 375.518 mo
235.998 375.518 li
235.998 396.867 li
293.419 396.867 li
293.419 375.518 li
cp
.819608 .545098 0 rgb
f
296.537 391.833 mo
232.626 391.833 li
232.626 389.907 li
296.537 389.907 li
296.537 391.833 li
cp
.968627 .694118 .05098 rgb
f
203.91 389.083 mo
203.91 385.89 201.322 383.303 198.13 383.303 cv
198.13 389.083 li
203.91 389.083 li
cp
.6 .6 .6 rgb
f
198.13 394.863 mo
201.322 394.863 203.91 392.275 203.91 389.083 cv
198.13 389.083 li
198.13 394.863 li
cp
.8 .8 .8 rgb
f
198.13 383.303 mo
194.938 383.303 192.35 385.89 192.35 389.083 cv
198.13 389.083 li
198.13 383.303 li
cp
f
198.13 394.863 mo
198.13 389.083 li
192.35 389.083 li
192.35 392.275 194.938 394.863 198.13 394.863 cv
cp
.6 .6 .6 rgb
f
198.13 391.009 mo
199.194 391.009 200.057 390.147 200.057 389.083 cv
200.057 388.019 199.194 387.156 198.13 387.156 cv
197.066 387.156 196.203 388.019 196.203 389.083 cv
196.203 390.147 197.066 391.009 198.13 391.009 cv
cp
.211765 .211765 .211765 rgb
f
260.391 123.724 mo
312.234 123.724 li
312.234 139.946 li
260.391 139.946 li
260.391 123.724 li
cp
.6 .6 .6 rgb
f
311.661 116.538 mo
310.331 116.538 309.253 115.46 309.253 114.13 cv
309.253 108.785 310.754 103.581 313.594 99.084 cv
314.304 97.959 315.79 97.6226 316.916 98.333 cv
318.04 99.0435 318.377 100.531 317.666 101.655 cv
315.313 105.382 314.069 109.696 314.069 114.13 cv
314.069 115.46 312.991 116.538 311.661 116.538 cv
cp
f
362.719 114.13 mo
362.719 100.189 351.418 88.8873 337.477 88.8873 cv
323.536 88.8873 312.234 100.189 312.234 114.13 cv
312.234 139.946 li
362.719 139.946 li
362.719 114.13 li
cp
.211765 .211765 .211765 rgb
f
360.425 114.13 mo
360.425 126.803 350.151 137.078 337.477 137.078 cv
324.803 137.078 314.529 126.803 314.529 114.13 cv
314.529 101.456 324.803 91.1821 337.477 91.1821 cv
350.151 91.1821 360.425 101.456 360.425 114.13 cv
cp
.968627 .694118 .05098 rgb
f
321.073 104.706 mo
319.474 107.483 318.545 110.695 318.545 114.13 cv
318.545 124.586 327.021 133.062 337.477 133.062 cv
347.933 133.062 356.409 124.586 356.409 114.13 cv
356.409 110.695 355.48 107.483 353.881 104.706 cv
321.073 104.706 li
cp
.211765 .211765 .211765 rgb
f
331.509 119.421 mo
324.639 119.421 li
324.639 117.976 li
327.105 115.482 li
327.836 114.733 328.313 114.214 328.537 113.925 cv
328.762 113.636 328.923 113.369 329.021 113.122 cv
329.12 112.876 329.17 112.62 329.17 112.355 cv
329.17 111.961 329.06 111.668 328.844 111.475 cv
328.626 111.282 328.336 111.186 327.973 111.186 cv
327.592 111.186 327.222 111.273 326.863 111.448 cv
326.505 111.623 326.131 111.872 325.741 112.194 cv
324.611 110.856 li
325.096 110.444 325.496 110.153 325.814 109.982 cv
326.133 109.812 326.48 109.681 326.856 109.589 cv
327.233 109.497 327.654 109.451 328.121 109.451 cv
328.734 109.451 329.277 109.563 329.748 109.788 cv
330.219 110.012 330.584 110.325 330.844 110.729 cv
331.103 111.132 331.233 111.594 331.233 112.113 cv
331.233 112.566 331.154 112.991 330.995 113.388 cv
330.836 113.784 330.589 114.191 330.255 114.608 cv
329.921 115.024 329.333 115.619 328.49 116.389 cv
327.227 117.579 li
327.227 117.673 li
331.509 117.673 li
331.509 119.421 li
cp
.952941 .870588 .611765 rgb
f
334.508 114.507 mo
334.508 115.712 334.612 116.577 334.82 117.099 cv
335.028 117.621 335.38 117.882 335.872 117.882 cv
336.356 117.882 336.706 117.617 336.921 117.088 cv
337.137 116.56 337.244 115.699 337.244 114.507 cv
337.244 113.301 337.136 112.435 336.918 111.909 cv
336.7 111.382 336.352 111.119 335.872 111.119 cv
335.384 111.119 335.034 111.382 334.823 111.909 cv
334.613 112.435 334.508 113.301 334.508 114.507 cv
cp
339.314 114.507 mo
339.314 116.224 339.033 117.494 338.471 118.319 cv
337.908 119.144 337.042 119.556 335.872 119.556 cv
334.738 119.556 333.884 119.13 333.308 118.278 cv
332.731 117.427 332.443 116.17 332.443 114.507 cv
332.443 112.772 332.724 111.494 333.284 110.671 cv
333.845 109.849 334.707 109.438 335.872 109.438 cv
337.007 109.438 337.863 109.868 338.444 110.729 cv
339.024 111.589 339.314 112.849 339.314 114.507 cv
cp
f
347.611 119.421 mo
345.56 119.421 li
345.56 115.031 li
345.56 114.489 345.47 114.082 345.288 113.811 cv
345.106 113.54 344.821 113.404 344.431 113.404 cv
343.906 113.404 343.525 113.597 343.288 113.982 cv
343.051 114.368 342.932 115.002 342.932 115.885 cv
342.932 119.421 li
340.881 119.421 li
340.881 111.905 li
342.448 111.905 li
342.724 112.867 li
342.838 112.867 li
343.039 112.521 343.331 112.252 343.712 112.056 cv
344.093 111.861 344.529 111.764 345.022 111.764 cv
346.147 111.764 346.909 112.131 347.309 112.867 cv
347.49 112.867 li
347.691 112.517 347.988 112.246 348.381 112.053 cv
348.773 111.86 349.216 111.764 349.709 111.764 cv
350.56 111.764 351.204 111.982 351.642 112.419 cv
352.078 112.856 352.297 113.557 352.297 114.521 cv
352.297 119.421 li
350.239 119.421 li
350.239 115.031 li
350.239 114.489 350.149 114.082 349.968 113.811 cv
349.786 113.54 349.5 113.404 349.11 113.404 cv
348.608 113.404 348.233 113.584 347.984 113.942 cv
347.735 114.301 347.611 114.87 347.611 115.65 cv
347.611 119.421 li
cp
f
272.925 139.946 mo
260.391 139.946 li
260.391 123.724 li
272.925 123.724 li
272.925 139.946 li
cp
.211765 .211765 .211765 rgb
f
278.283 130.688 mo
276.357 130.688 li
276.357 123.724 li
278.283 123.724 li
278.283 130.688 li
cp
.8 .8 .8 rgb
f
283.471 130.688 mo
281.545 130.688 li
281.545 123.724 li
283.471 123.724 li
283.471 130.688 li
cp
f
288.658 130.688 mo
286.733 130.688 li
286.733 123.724 li
288.658 123.724 li
288.658 130.688 li
cp
f
293.846 130.688 mo
291.92 130.688 li
291.92 123.724 li
293.846 123.724 li
293.846 130.688 li
cp
f
299.034 130.688 mo
297.108 130.688 li
297.108 123.724 li
299.034 123.724 li
299.034 130.688 li
cp
f
304.221 130.688 mo
302.296 130.688 li
302.296 123.724 li
304.221 123.724 li
304.221 130.688 li
cp
f
309.409 130.688 mo
307.483 130.688 li
307.483 123.724 li
309.409 123.724 li
309.409 130.688 li
cp
f
97.9453 363.299 mo
75.5653 363.299 li
75.5653 367.956 li
76.3847 367.956 li
77.2504 367.956 78.0753 368.323 78.6541 368.967 cv
79.2329 369.611 79.5102 370.47 79.4196 371.331 cv
78.3945 381.07 78.1086 389.124 78.1086 397.161 cv
78.1086 406.252 78.4746 415.365 79.8625 426.916 cv
74.6554 426.916 li
74.6554 433.528 li
98.8553 433.528 li
98.8553 426.916 li
93.6483 426.916 li
95.0365 415.365 95.4022 406.252 95.4022 397.161 cv
95.4022 389.124 95.116 381.07 94.091 371.331 cv
94.0004 370.471 94.2794 369.613 94.8578 368.97 cv
95.4362 368.326 96.2608 367.956 97.1259 367.956 cv
97.9453 367.956 li
97.9453 363.299 li
cp
.968627 .694118 .05098 rgb
f
90.3583 419.626 mo
89.5159 419.626 88.8327 418.942 88.8327 418.1 cv
88.8327 374.787 li
88.8327 373.945 89.5159 373.261 90.3583 373.261 cv
91.2008 373.261 91.884 373.945 91.884 374.787 cv
91.884 418.1 li
91.884 418.942 91.2008 419.626 90.3583 419.626 cv
cp
.952941 .870588 .611765 rgb
f
91.8417 363.299 mo
81.669 363.299 li
81.669 327.123 li
91.8417 327.123 li
91.8417 363.299 li
cp
.501961 .501961 .501961 rgb
f
90.3582 363.299 mo
88.027 363.299 li
88.027 327.123 li
90.3582 327.123 li
90.3582 363.299 li
cp
.8 .8 .8 rgb
f
109.74 310.847 mo
53.0537 310.847 li
53.0537 329.158 li
109.74 329.158 li
131.599 322.505 li
132.701 322.17 133.454 321.154 133.454 320.002 cv
133.454 318.851 132.701 317.835 131.599 317.5 cv
109.74 310.847 li
cp
.211765 .211765 .211765 rgb
f
119.005 319.361 mo
118.911 319.361 118.817 319.348 118.723 319.321 cv
108.715 316.441 li
62.2092 316.441 li
61.6472 316.441 61.1919 315.986 61.1919 315.424 cv
61.1919 314.862 61.6472 314.407 62.2092 314.407 cv
108.859 314.407 li
108.954 314.407 109.048 314.42 109.14 314.447 cv
119.286 317.366 li
119.825 317.522 120.137 318.085 119.982 318.625 cv
119.853 319.07 119.446 319.361 119.005 319.361 cv
cp
.501961 .501961 .501961 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: ( ) ()
%%Title: (1501.m00.i123.n008.P.c20.construction tools flat icons.eps)
%%CreationDate: 1/15/2015 5:35 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2OeZLIa:SnJ%TZ]L7KVY:6bJeq*'-4h<s65mHF%^t-^17=XCpU@n;-)k,)hO8LnYW]^A_m.B_8Q@7jVJU#r+7rdfHKuas
%r4S4iD)8M1Bk@SLXhhJ2s&`HN=[2VlPD^0.9#'W"H:OO!ici"gTFl:W)k"Q]YE_-;0&RO!o?hJ5JmXpn_lI$.S_Tf^<iS+V;UB-(
%]o84V#cO@mjgSNo"UOTR_<nSB-@ekh?4V>`\?YhWnSVZN&tiB+;-cg8nmV@hRAr98?2C&2^J>E[$C,QN`IJJZm2.n8;)I#]=WLe!
%3gsYG*BU?2L&\B5W?YUAS&`9@+b@ng>XR'"K5P'q<6*!>RVkJ5-gHO%rdusEoP'Zkk4*@h#j>-iPf_9$XK[VRcs8'$KLK/[RjQ8l
%e%n)2WnNb12%8c%VGXh)W/ftARZ0b0Wetp5d;."2Yn7q%X[[tY%-QORW+$q[-B_b+'PO4"Wh\d\`[J'Q!5j]e?Pe?^quGhqljIsT
%%L7af>Q0$:?du^$Nn:<:XfqA$DU2dTFlKknp&iAKLbnt<$pS?]Ia.1;H;*BT;(;:mH]hh$&).BS;Cr`6WiYb\`A_=0ikI>cs$%tk
%p^'0#)*MK6G)hT?fS7BQ=A$ReiFe-O:^7n(a>.lN-d\jMCcB"u:Xdij5YNqKm!n(LU+f8,2Qp*_`&"a^-s"p+16uE^/bgF_bY(EH
%h#FGCs4YQ,oY%9^iDVbgl(-?("&ft'')ut@EPLIVhR;]4?lDDnZ=,]uWdY%RNN/<`*mJJW7f(;$S9g_6^B`I@B_69Y2DU::IXBmh
%QG)0>WZ79_EnL(iVnkI[kaI6SZ>ji*R)b5&i[>sj'?!Dk/8=k^9!")]"^W-<jp3fj@AeQODf*:gg:Vk2Cq!?H7[hFS19/4k&d?^b
%L=mmPnW!\(]q4*o4]f%t_L\NEPjH3m2SIS>(4mn(^PcIj+Q+hJI?!0:ru-<ZhZ-*[c"S?:g$8Vfe6@b(cTbaBhjh$J7N[*7m0*C]
%?E4k>q8[NY)P$\mGCHA)FC7M;RD\V<nE!5RR5AmF[,Y-d#CI'*AA*<daTR8^B?/?&?_K*#(&sc#50Qg,'G1BNh.ciL2hJJkR$C<s
%nYkES]M=31#SEBgJ&*cZn0p\\"o[;5<&d0Gg;"K@6=gf)`tXVa9%-bMhASXF0X&t&'m-Tt^oG*bg"8,P:TjV%jYD[Y6iRt@7pbWs
%Cqnl-G!fT?Y7[ChpC*>lA&2q;l5(JEI9Eaanst7(134?:N=buKhntc@hrlGhR?EN#he=+>(d3MRncHo;6,0Zc;qtPYCKO7!j".S^
%(pd/CK8LR%'uuV#q;m1OQg<h6K^n,Io/p^9]?Lo!$orp-;m/%UPMb2fT1V&5<2alUGSL0,j:_c*MbCP8$4^:Bh?#>RF4.8dr+KsP
%br,b@R?L:Im1Y7Cacd",Gm8Fd[TdN_'.oZQYTHZtm=KrTTms?hIa2cF[gr`*fAM&'k@2,V^4b,64lN<`bjsZ97LOZM!sWl4kP^t_
%MJO"7juOM9=f-4BDcAfIMb7ZNofXuViK*c3pD_5/+.&7h-^jW@5hW`)(\u6ioQck^,Drk@-7]*ks(8s4<YGC,6,MN'7tRb:+lZS:
%g:L$E#VS-m`*E03Mp#E6C.,nM+t"N5;bBAMVQE>:S`5YD"NF'k'pZ>CZWs8Rl(+f;afAKA:kaU(e+It>FCMH23JYDT<UhI.K%6=2
%N=boV&>W$tUXa9(<dNV0IN"'.$f@B'cRS'fZHg.d?g@DNq_4IQbZLV;>nMi)317::hsEANW)-@\Y/k;\-bVRNZ]duG;E;r.V3/Yt
%l'0>&'F!b]$79P9s)aFPO?,RS*:@?nd(Q#=AC1$3*lKNW7OBTGh,C9/)PnB_[L>gb'd4qj^JjZH=gfF^7B$R(oD(^-=I5bf'[u00
%H9n.Sj:87-rE<fS&^!fO$&_Vtg5&mbEmkoK)2h=of'skZBtOr@h0B=h;N0lL#'26A%Z=G,&^)b8\OA'YLufDWgq:[JCYBarF6SLJ
%p3=lMVg'g/0f'Kh6)9_=s7.*VQX2QE[91"4'c_=BeY<(FST^?so#p+RG;[h3NW(?^5)W/mo)gC5T-#^ofB[XmFg%&P4]^&!2lE$*
%eMJV^HA=C;W7AJ.Dp/d:icIaJ0PT<ul5f^5kqq%obk4=9Z^I?F%J3eB2d_9am/4F7*Oitgk3kd.g`S7oB+CMrJs<]Nkr69#cJS#^
%jgWYdJAE^Z7UUQ=$:1`Io<(Mh<9::H_k%kA8+h-CQ1rNR^,mJ_`Fbl_^Jj_Rr^k(%V^c/pB/JOK;\f)BfhYV8WMl3T>fE.tDD;'R
%JrK`b\W:_Ee6BV,\l?W5m<.HBgP.KX)eRO_RCabrq6Q::bR$uA>"@iiR['9'HE/%7V?'RSc<"^jlKSjJ.YVTK)O2h/d9t`M%:5sh
%]57>W2!]WIV3)_i*Z\LW,F+d2cKK!'9qUi61Q'Hp%I-WSP,UBuM_+r/46NNd[U(?G4t?_]i--f$jQ'!\46_aPI#c7Lp0t;MkGIf-
%WO?;1IHi?e%9&iX;q8i6T2F+nod6;\c(U+`&2`quhu?K0jiD`)a&K2$'ln@2+fEEIbtMf@-:`=j)4cJ?l]a&!WnA*<4ES5N]q7bC
%MLp'>o`gu\-/L2?_?l[J0OufdfK>^:8oq(Eg==hBGqG94D2cTj4R@hd:Q`Pe*Gor:-QK!ajj$ClDMEAOcJcV7'Kbr!n6gVN]/ZPj
%j3Q2Ar)lnAs4"=KW?%u&[l\;_kDU7L)8DhPe=HtlQDE>)*U]N5)kfkib09(R<7?6kG?CXYPCK.3\sl-J'T8H79<Zn:)^g)eT(>LZ
%ei?RgY37rBZ1*$eq?F"UZ*c%3]Bt>SnaZFA"0XkO-E$)/\eIem1D/k>:G68`5,tlKP6n+IBfo6inBNk"MKIA7R+`LnRr<T^m>Q;>
%lrC908n,C)>FKW<1O8L\MQG+ibk`$l9`M1iUUk>fekb%:X/4UK;l_hql#n1,mVY9gW/b%/BVqJUMVT!f*M:!oajbRcC)rqW90lES
%oWG.`)S`rBU\qI.''sn7PZj06]IT.C(a=747,tJ-L<2du07R%kVGQs!+AJXDg`6i`HHZ%\S8"pHN=*CuRY%'.kZneN$<h.c7&A=M
%p;cOVM2@a%ps*?c'KY7/^IVq(H+?#+3[mV!VR^2qQ+GGc_J@\kWJ"sX[X'V4(UL5(F0H=S1/Bu/dL\55Oj*a!0,?WHVC=a!jqbBC
%gkml-&+3F5HVnBc01q[qRX3/@b'_Kjl'_(T-n/EE);0pGRA[_HWM]L`mmTf(-N?,D[FgCX$hQ%EU<JS<RI@g;lG$^[8nFUfU8/rE
%qJF_k0?Vf.[s?ef;OOGr-u"L*r`O^UHVnB`Q"Cg+e>*_u)&^WN^-"(!2RULpbhgk[ZSN0%g5ET0_-Gf'R+j\QdLA-J2k9$!7Jes/
%GQ$=VD8jtMnoW/qR9Aa]lf^3AU":'+D$KW9$9;DU[=qrA459!"ADs]iZ0W\[(0YRT[G&K%>A1E[BXNQ#[a8bFT[aglg-Vj:dVA?1
%d+Jj]da+Y.9>Q5[F^99i('#0"kk`cL?;.+./6GT@`AEIobeN0M*`L1J.CL\2^)j3+W@4%F/#ki<*nC;a)b1A+pXp"JgRL_2fC>?H
%aNHe[mIHR^V'e'>l%tj+2`2nVRdaD#^qWV=%0*pG5@iniC\/n63;YYHe6>qf<c<tHlS^)_D;XXo;dEEIQ+\]r\o#+NAMRDH$XXYc
%^>.ptq1%Xg0@T&%r<&bPh<\fLoecEem+kH-cID=>^U<ePB.Ej6D)u&MUM"`JW"LrA5o8=a_g[L;i+GLc>^KUil4;(9<,4:a#RWob
%Al9#4a:hjU&ZD`lPc#4p]W4nF8hh6C43WA"lFkB<hb,cEB3$P/e'3,O-I/Q<9ei?jVgIE^U,,8kHIq:6[<"A$`pn@]beMFocJh1/
%2-&S9N9T>ths+\LGHq,tdks;S^GgOei[h+c`VT%4rV)=o$a'JFb%=7/ZWQg)XSL^:Bo>JF(2LXB2;cBAmpaOcWq2++2;dZCGg-)S
%Ds@K'8]n*\A#8Y<`2#(@oieKToa=%n_Lkl-4YT^mY,LA$R3NH5R\He5E]:arI5`lr$J1s.WHf4CX^6f"^FQmEqi+)7CGKmhqSd"V
%$ER7s7c"j?,qGdu9@IJ_()aDHL?u'TjlT"PpKO,[62f&SX'37D2ZKc^%DTC*nZ/-Fa(pZ>esXM,=Xk/maIb'TB8c]@%?NGCq6PS:
%/%O-k/6OE&Er6,h9:7r,b2/P&3@SY4r_mb/H_VW"N6Q`InrD0U`B&_>AMgrA\i6J,!o5W@rA,nrC7=(bm8lR5GBWt'K0;ek?5]hb
%B9OIW*"]fs7fI)*b$>T-H88jJ,3C0DP%o<f@dXDo\4,CgOa("S?D]+?_UC%en\VUdP^cg]?5ABa7H.m@GZc:u(5\CBF-brBn^88<
%R[BrEmmR<BFq[Co4ER4[%+<p:1bkU/Q$GG^H`^/6PoY[eIG%#WoB(tS-N8SO`k5V9dAZf"]_]_Ir%+l02"EQlpIqBn.q@<%R7P),
%Fo"hm/\\Tt0TNV&8J]<c@3#;[j1)UQBtCD+4P[eqc!Y>P/S'/tnm?#LB5tW`)QI^V`cH.sdd!H_gQuOBp8-R$fu^'l%=TlMWVL$a
%`B?qR;u(Y+B.f4N:LhJ9ih=G.MO-r7cs94D:oea;*Y(KVYGN#<R@,sI#&'6`M[e%je#pf)A^2B\\G[@VJH'5Uc,utk0,U(bOdX[?
%oHHVk^Be[N24#X_BH!N'%UG*:7&7*2GA*:B6V0S^YBi(Vc8/epcA9ls&9I*6gQ30d]JH2R?^A`7>dh:]/b0ab&<JL7(t7[K4,Z5@
%FAJA_"16-Z/FjY,3mhPN<#9h=R3.Y^*b,uV)#p05XllP7aZ&\Y=fp^aH=#WS:f"EQRFReJNtD9>?JO#p2\1K-^J\?;+;_aBU6KJO
%$Xq>oY$^Jh5Poo1OsVePPeSa&.Ojp61D:D.Js0NS<uI9.N9*4,ghFHa8dJq'Vg5)8rbuo>%X._DS(aL8MhY-o``aa'VP/[#h%_5o
%/!FT+b+pk[G4mR";R._m#O2J,4Mp%EW*!;U[($0O$EcYj[pC"q>D]!$IcnB$!<#!K8\qsLrFFdQ#tYltbXec-HAB-KM:**@dF-6W
%pI[fiZu>Y9k%V/'.Uj0_]qhIA<%K=`Nl]nP,N\s""bkeY[qsW]'2n2eR).;UAU]sZ:]_F@$J/T\\4cjD&^)b8\[toLMeHu?bq5[#
%Bb,_0dG,q7qe)Y6'JAsh7rra]4Y4S."#Ce?V4_Q8c7QoD76%a^k8*%3,+P.kE,JC@K7GQp&^qfLRI_-@V'9L`dS3q:pHAk_(EG/g
%=eGG5/k)/3\;oP9K7oJ%ZD[Ys`LIusSb[UY(AD<6q>?k?q_<_C2_iO>(0b%*0dUS8ec84#^"9r;hXE!rRi)D;g0UW4qn8+A%GL4J
%DPYBPo5]%$FX`q/T,Eo[P+J.d^i+!,Pu-s^EYco*G&sfLJcG.=T;g/pG3OUs_ThD"WRboBiZcVFH[0F*T2`I&N^0]<?&;YjWq]5O
%KqLl<Pc"fuOu;Zb]$udScA^UTs"*B@/%:uYJ*uIoD2QE-hl1l95HS7J(V_K3IU/g3f\XEO"t6]6c;r':,qGdu8^h8\X;%!eq$m+b
%1>OOI]rMaCOdUu_GZ6iFV"FXbDt[,3%Yc:ufR57#adSOE/H`04Ak0oHQ2++F9lDZ'r"Y9OmeklN>(.sIB<]Mm4*I@)fC8,2X5$jR
%GF]OXB?%Vh3(44QB]0Y"Ro?]`M&&;&KT;RAF#;?@dG1SfkL3"i[r'aK)Pom.q]@in1O1+Gd`Bth*K!i8)Fgjpa(R0pNWu[cmp.jM
%<*.5gP\+g_HUhCjAB[&lC,q9dNOm1Y-?&`[B+;"5Q&3n]hAm'iQUn"21sY>\f@`'BBdUs=3%g0M_Dkk?c:kii9J^=Yh)J^ses^me
%R=;16lYPT4Armgi%8NtQ1Og'Tf%q:72Mmg=4+-2]M77cEPBGlE0XKsnch14TF87$XN*f9.oDi0SCDpePLM%>#hlom"A2:Rb1!R?D
%"n.?.?)ZR"Z]A]6Fl7BVqlFH;3gOkADQZ^CR[D]"53DKnhcs@=RD0tV/VPuEop92/cL]H9[<]8.@m3h)1OR<_h!M5]4>faal$V<^
%qqn?\)-A8s7Z9#Ob$`4J&Ys\WHm[Z`=YZ^3:,k%uiHbiL<bBb'44H5@+)68&<:A%0!osh+p9]fucT=q?L7-+XC7,c/9LSB^[->V5
%kr[HCV1,Ic4HjMjSqJY1B9^WQMqRMbbjJZYeG30Xq)dCP66Qiq,B2B,>2<ANQP?;nk3"Mm_6WBJk&ar,\A?\X4g#SAbY$5?gSk_;
%ns4&JDJ.tQ@YAf.Keb0!3bqqNDlEunHj".4\#1]g40<8m(_XYY"J*49>"=*sD@9V-n@X6JDooclq8_eZrT:?ANZ*?@HUn[R5_jC1
%i7uZ>48nSYk.kbX(Od`QfVq1Z-iKE@^D=IOUOL&'">>'>"H@R!gTOilq0Dp1-HeIR7)Z]Y$`&dG+&XemLJR]r+jJ*,MF.@45E5%H
%](td+m'g5tGCgW_G@<PHC'D@UoF:!Enn/L=&%(%lOIXoF,rB1/lHOLi%gshS6i80P3T5H04G4]lT<,).L2CIcXR4Z+B#4dGFWDKs
%_lRVmQHe`DaC,O_8*\!1r3d-.IK8^NE$B@bq>=77<<%UnO)Zp?,?<q8m0?.4PpP$N?:\$iB$ZUkn9[<jd;a8WNK,ZA4pD/G?AC;m
%^aGr;_gdblnK7c.j/=_l:Wr4k66H2JC4:H8_!4q&_O?4[l*^]UFN:\/SN`F0$id7VRd,D;APGU9/To-ijl:!Rk%&Z"D]\q!6EZuL
%_;@YEQD:K5+a.\V`?n=S5Fm,&];g]01f^rc@35KQB`M?3PD;B-#%KlRehgYiCnsS/("^<7<C_%Gr1GHuXrol&p^aTB$DPAOH2JUs
%+o.U@7'R`NYn4CEX2H4"<c"6N1[>*,%;Nm`9ZNjC&[Z5+NX.KOH":+K`Y-%?NN']E`2=Q/DIKTKm^S/")RCDV_f</Y9beUG9Z:Rr
%))dM1D'M5-d8]J1:cMFI$H3>Vbgo?X1_:1e#ZXh-fkQ6@E6(c?1B,6Fa4j/a-5o`UOC#p^O=M?LF&k##e\tC05gU3]fJJBmKoM1P
%Quj,u.>dSWIgH9R;fiou;pu0g?es3hC=0I%Xp`'@IK5TjEeYE@gTe1r5DZ1Yf2Y';E?mfV:"?&#QL,MMU30<G1`AD0.]Q4<X<So:
%0nJ=KM)J&`20#oX`Ks"]MF$7@>>[630\Q*J'bV[Sf6HcE^P&O#K2!*h-AcUP;Ve#IYX".IKP3]0YmAWbCrerW)qMfTaRK4!=WK`E
%DCRS%S/gY;Oo&K"+icZ:iE^@?$"P9XbOtKF7lFUj*T\Lr(YZ1\=oU80WgLaI1o7:pJ*Cd"4%VZ.r,/)2%7KmhA2c:F*Rt5[F>9`d
%RsqD>oQn<=V6b:F5_fKW`e#N;8.jC6T1?pL:cOD1r[BZ_eB4^T@d.]F+LlO%r2A./qoe;I2^_(G:`+\LQrOTBduAjJGuh>)f&TpN
%au+dnPs=ej53dtQ\iLQ/T%@3AK]_@%$;_LKk/?`%->HEi.MoikU%mN51,d]i3_RMN3\DYQRMfg/qT]9'qFY2VYOlQ1b>*i.,Ft*K
%[hgm!5lKN=Li.;t%-5fj_E:LFWW0oL3LRP!p7Ld!Hqi^?mFN&npC(a+DPLO++#Uce@G:R_mkr+H4RqV?Fl<"YBPc4j9[UeR'!2$\
%Tu\pQM%le4=.]7"]duAePbi_;SiS#X1Oo/+JZ?fs_)TT_K-%N;A\ZeXm*m[80;)0T"tNE-#=5APXVp8RI]Id)>&mrD_u6@$h,;U6
%HBYP6J^UrP_]N)D/f8X!WL*\.OIp"cp:S\)hZHpe'0=s_@Oa,</'Uuo!S@)nE:%;qCXd^qCiWX$.Kj4d7L\"aHF*UCPaN,_oMj2H
%r1HIXQY(9U2!t,!*X.Oe.Mn]a>*XqSfa84l7q93KN)8atci*-8TlAKf:][I<FJ-pdcoSuV_j>mo9sF!K%$FkC=t#mpRdEjhdIFj)
%qHrJV10/j=r32#q`]oqKM-K>GkRt?EZk[)N3nCG3RYlPNrLR*`HD:rg?`,^Js4j"I<PFogC/.Btj*E<7nGOg@:@BIh_VNB%WG3bb
%2$B?2[khU!Fj]q9r6/$bm^IHF;_p6XXQ4!+:@C=73n4YPPEjNNk7M`/.bDT*nnkR_Qd]Lu3q[6b$a*-3^]kAt<>Us7HYpM"eXQM,
%FKTfObbD3t,C?:SX1k4;E$ob.-;kfuSVU9Tc:#$[G?%:[oWYP:Vh3OsbNkb<paFbt_g)Bbg$ek#B28E?H^UF>^#ts<AUes?qbI9Z
%Bk:Z'9ineu76Xiu&H[Y[f23!pe5abX$cs)J.E,-ugVGX"<"]!mHM,mn?fu8&_ss55S)`,hO'gY^k#!c-4kFEP4W=!2n`,HeM@s-L
%?F=(bMI[)"!Iof*l'@\VD6I,;b$*9[?6s"k:NVfEm^@b>eAJsnY29UBa'Q7<GG;?>@UgW0Br9_r5`0uO%%gQ9a-XMT"dQ-]hZMgC
%U+%OIfPLcS?K9[VpD_q%?GmSo0rBa>)F4/p1h_qH&),\Cd)doa$ED"BZ8/flHE\ugSR/?ucN(;amZ<$X<"Ok"e6@C!gZnuDIbN45
%OQaWeiZ'GQJgaZ<=Ql)#qg\DN+bQeY<O;8Mm8\&-e8I1^KR2g*OE'cj@'(*Jk6QNPq]KL#q7E<6cA7TEJ+k-]4/O^3h,r@H\JKIM
%:Ai+)Y6Y"U#8OFnMo&aL0\hp#9*6R>c<`5+<rW%3(N6PBTnAu8gmUA)&Z:@$Lf-2bUhY2nC%47&N8ns:G;$i?6*iLkm"=6jHUG^c
%.ie80D34>1<J5J:6IMQ2COZBb6'9$CnEA0/Z%>tieD$XAE<5QI;!8^o@"p(0\Op))fAJ<se&Her6_sIPoKIm\cZXW&di_RK3D$?"
%'1cH$*gAI!]7+@qM'b77c/cR\'rlgcFi[sE<MEC(k)gIW^E^'HX>irIbR%t;d(EJhD/6.3\XKT0LD>]:cJdOqdPF`HF'<sP.K#NQ
%Z<J2FrhSp]?om^4gV)JJ^X;6T.#sF45TfX`0`QlgCV7f-:kmY`a$r<tcbltF74U"n&FlFD$es(Ke=f/jnCjfWL/*HM<DJ=FU5"tP
%<>tfcP(IbgRtenhZTOh-SLEE"S2D[]4jTAX%A2-@-9Pt0_1$%2.!TA[@uk]UMOJM1da\GG,-u^b?5ii\79tk3Hd.H5ck2^C00)Bi
%F(;/S./)Cl!?IN*9&@>Tri/K1X%<C'KgAk$lsVm/b-e7K_ZtNTX\kiOTpe-/3Kn2,,=ZuG2'F)VCW5C;]2i.]J&`(8W!8_j9,eG^
%d52/2Y)Z+K:0Oljbf64GcYGhA$:\4i8.mte&@?otg<bM1kGg6-iS\C.WKM%Mh=Z)^\#oMa_]+q8]s"oF_64HbK3[o]X!AQ/rEPE&
%G)>o:a!"tf&f!-j1Ho6=a4`[A*P"%s6d$a)Phem@5]VP)-NgP$a!9Ufrg4/e[*]KOB'A#Hk"th^f8FWch9f>83\n_*FZg.?8&r-:
%@CVckf`+U'>6b,8cjAFmhRen6dSNOm<HDEa)G>pA7sG_r![Wl+.^m0,\UeGmh+9HH_9oFhSZ6$;6<Rq!FjQ'H/sH\57E@g*n9OC(
%etgk@;V.ZPpA0j.4=`0D*C)\'+=0[inX-1Q;KO`uXoe]>Vs=SYBMPQPMNV@oNQ-W\h5bl!*.jc_#q]517RM4a-T!<OO3M:Z1?"A5
%rSW(,<=:Q[CcR@"Z."rT\;:+T#t8*W%s5/4CLjIS(\K[sjD_b6S<oF;VdmlXX3I=&2d5Hmd2n7gP""'$g8O):;$,:fbDg3P$h8C/
%,/Q3''8Ulo=]XAZjVVa`*Eb/+T1Bu*N(e6"iRbr@7b/D`\/0h?.n:]1=&umWFi2VnX>ut:gERtC)+[oD"[[G44&bK2Lt3FeDHOY2
%,_6O@aWpsYQb#l/Vk]=WquY\Gk`Y$3jFE+bRXN&c-eXiQ?F=bVchUV=aXFjjH+hi%g(RKH6nW\`fq<DK]c9OZUQ]Q7nrQ4s<.YmE
%GRm`[j(Q6&@2e=!c4Q*d9\lb%SahHrYD,mu[e%uIQJogHB#/:=2'\Ia],d&%ajMnLN/C5q;Ulaa'\@<aR5J7f;7&,Ue2E)KN9B$H
%Tej-H`H58kgp_8qYaYg4:DD<61D7l;H=0>C#oFUrKtQR<V1==a3mfdu:m4#g_.666@*?=SHI5Xd:gMr&T%DA!$8P-D?:nrCCTQ+P
%A\7p4mPsdA9XW:9e:PLRJ$>G"eZ>I'^M$qbRpP9X$[O;"YYu6sX?h`\P+<IC!a,:=e(Mj7UaR;W,Xp[::BniG$e&SA\^q]LN``M1
%h2X1g/@q-in?sZ%hN>nt?A>BjKsK*Dpjn%T@c5[mD#?cT;(N/k^/sb\`]I8'PN:UlenASq]9m0"<60":&k@*".$@I4h:V5NTjjTq
%E3(XCE]o5m_puA-o8)Z+8o*dhA;/`s8f5TE1)PM#BbINJ`6`#7!5b.Af#'Ia>dp/)Z.]f^/joAZR,7m\G'QXX$R>4=!f'qZC0`Bi
%FN:@(W=,!Rmr@J-H4[Har@oU#X8Q(1$m!\97L8\<35/3fh/P2A9uU[a\U1uYcg:$5/Ch/02(c6Z3C%U=@:i=P.`(1#Nl;URT+Cj7
%^#,(*e4)l8d(k=M#PpHs'*B5a+AD+;Yr1sCc=GJoeh:3j1a,Tpcq*QIT^s6;98k8g(UHj*eDdJk(.!oE-hDKd*29-M4bgZ-onu+i
%Q<]-bV_EM'5/j;cS>_X.YO.'i1,DO^*7b)_)b5@Tjps%XATj)/1-&URcc(Z4cF[eYg`A)rdUN,GD!Bf:Q3X+5LlAIqY.nK4Z2'bo
%3'e*C*#"X,V7dLD>4h/\Edj4cVsIlDYP90Z<d\HkW9cJN<-`7W.u75Y1\DNc..^XD#C7!NlH.-G%i4kHfRPBF#"0Y^14Q:c3;0?Y
%AfN.a]*F02_cnuI*<YMAgQf7=?tq-3fVTpg]V$u.]ejQVelu48D@`8CBN)($8:.J>%,SHJ@KrBJJ,'?J7^!:IjV!ucOT+=DO-<T]
%%'Sj[U8PPc_VUko(883;\j:/SG]ENBo?,Y]B9,!b&$,U(UVjM;G%\:0\T-$.[pQ_U])9'7pTiV1f%ZNQeq8tL\%BrsN#*Gp096XP
%48k%Bg<gD#-.O[j-q^uDUNj&D4P\fkQ@6?X[G(%dG@,(Md*22qq-HRUg@+,V?G7k,D]/OGU&OD(V3oLk^)1Oa>l=p;g;VLgLAbhq
%=8_SGDgY_mbr(,o(V%o*>^:3Mka.1H_tWsKNQ:L]R:8nD59GdMU$^FtGAfZpadj3Qmmac9QeV;H]ld?O]"QM92HPd:9E!<0DRB\n
%&ALipcOTikg=Q(B^9QMhYYiSNp'R/[-T/o+muN>@[JY)mlc%oY$k[Tm>PNC3/V$WXIMV[XHh[)HcB!akPI1WIeqjoD[1CNl5F,A#
%3u.A3EoGG+gYBq'l&Sm9Y?/KBC_n/-/J\3_e*$2n+'`\a.c(nhWitd=b*T2D<E](_:As/GNV^-_C;-tFipg2bj\%g>5'cc6$$`bh
%\UUSG1Y1^#YM6Tgj`,A'ftlg^h>HiFDVOL5R\&hEp=,A.%5gOV.IME;!U&gi^AVA>WZ1WJ\d*kh*^!Y5>P7Rsql%VMpfLkV0'mF<
%Ge^TMRX"F.EUU7,i43,!^9)4bX+&pPc6%E[]['eT5gj`>klVokcdmI/9ab+s4Fd%B>2o\\Y$+lUY7D,#le^3fd_1oA*Gia4+2/=&
%.K[jCkP+]ZqQf\)[)G7H^#++Saqn*&^,'TZ7r8b^pk,mCr;"X<<d\oWN$EZKChpBRj7P>Lc*56=mkA[;AtW+P5O?8=W!hn]ZXYQJ
%)[%tcjbmcim\8Te@9B/'+-kVqn]+8,[f5RTNorQSR((Au^=dg84F<Y]]r^jH7h7*T\Pl3m&]iX45<aTiePA7K^;&le>[kPhPLaYR
%&N6PLmCX-cp+[uH:3NYU;S_T]=aC!So0"$=`!joWS>e%-o#?I`dWVO0q:=1XGlN@baYE*%$V'XMl:O6Z^EpE.-XC>t?kjVc6j:hO
%Xuu#'Q\l50YO%_tn7Ph%1ITQko3cq:[!+`Y]&2faE\fG=''mO#J*>ZTfI?*mT@nNCaf>?Fl^*nZ[@\-cXlE2=kK;B)U>P4:.fRi%
%c*/RS,9].k]=G7rQ"4cJm<]/;m&OrBmt^:M/\jj+3Vh?UPrno05:@7]qi7Db3j4hVe`KBMUdN.12rCj2]oS7Z^%/L*q3RuiSg?Du
%bs4Mk_rC+7Oq2ECfg98F/%(B2_-hbVjXTb6[C=o)J*sluS&Xas:H%s_\LZ1AFc05^g?0^Jab.9n&RCn*`hOm)l/O->A-XX2p-7r&
%<\M1;:=J1RV=N*khH@7S48HTt>d$@r/hmL:a"ORMks99nrU+dR/+#<75!Uo./'?/(O<a.`e_mi9H=Ul?J:[1$4-ck=O$j@4;&UKS
%duQ[W/q^<Sp,I9OBKqd*^%#E\.XZ'ba-TT.\Q9kK>0r5(d7&Vmm8No0@A3Vj</m<-ViQ_CguE<-PAjbVSNXN-8VDTqDYYuobk&cV
%63OO.<Qt#)eXqFrh$nO.:FjbAO`0*o'`[ZAjnU]*VdFKmX4saC^&Fmd`8/<TVo;`@?ETR%G0D?+.oCBX[)L1[*c*Lk)uE5Ca6Re'
%;/PJbrMd(#mX3hSH?jJ2Spu*Vdi[Cm\>)34poU4W(<YD,krD;GqFpG*2dWG`bCp`Ulo?m9YJc;2%):q%6PcUIIC2hmg)Kt_)-%2O
%-m1(e;!#.:9")924P%eA[<Jjr(2@M6O-!i'<ZXoINY&I-Ye`;ZmBHK6_]#"D"M8_CIA0IZ21R*q3eNYPR^$)<TMpM\'"4_V_NEml
%G'[8koMmRS;4b]D8sM=)=!H]o`(a8LHcHuV]%DBD1?!mg)E+oJ;\P/Ko<I>FH8#sV!R2koK2k6e7EC;s@TApCc\Saf/"m<>hMjPs
%c,9kZq(TW(4"RJ^oI6So[2OJTOu?9%;TK%X/r+O;nrf5B:<c=Y4_(kI$kaP*(/^'F%u9[40kI&HOH%R!P_O#-LuW^lmnP%+9>;fW
%'k7nO5Y5j&6i/tY?7LoXa:4OmRpd+o68cVJPuCU*?4u,%m$9[e<bR<T-j%K5&Gbp+g5q*ukNMSlOiE&1D(BFRH?j<elB=U3`.fD1
%e[F=GCS8t&khH`\\Q8..G4>nZc<'CdrQ(PDHdsT_X6LEVZb*Sk#&H#\/]hMe^KK8?Sb5aMDJq!ppJuIoI<[2WgY,$:a,iE;A/HVZ
%6\37eJN5SqPujd>9m%VPH'Pi[K2;:'o>kmohY^>*jn,U/q\1?p8QqhW!Le"[IDt&G>HJd^="f"@E\mMI5BkmDH(-n[m59)gb3R7@
%?Q5hYGH!0'NoMKaGfEq>qgA5rG?Dp.O_;SFY%EVO&>l1G(8k1'5jZb<gZ+h&AcK9Mhg,'H(kS:Ro'9WMeb_;h6hA%*?+SbW*r6oF
%':,a_R.;o`0XSo]%kYfA($'CkciUK*p=leMX((HjpLLsdoGLp!SY$)JN9f3rcf:dsOeECE,=bChTH\A,&H@hR//<ZI5:b65=R2Ha
%k0aFC^/%a:bOb22I9[5cGAE>q`')n>`n(J2$8fd]?\+"*1e\lO04(_CH,3[/UHebg%c$%'_WAq\_Ku1VZOK*)EE:%FPq.sqCak7-
%;5_OrE:f<J!*[np@$[M1A=q&De<<`aa.qfkgnT.6oWj%!7hd#_@fr^2mZmgP!$kQG9&Isd]>`TeFq(2>*DOq)NIrM52trnk8]3;f
%dWS$rhqo,`Dc_*JCR9q4PNiXIMA4@18T:(1qmQ1]C=N0e9AdHII8JX3otP98DUT1AYdO=HrNg!8b5:un8)$;Ra6%0/#j?bCb.W(K
%nubr>;ADDa1*8VVm&U-]O]$XNhMrfEA9($6FG44'\GUAcA**OSfpRr*Y?;^^m&U'7_$W1$8%!%$DI?N->Q.6AFt`\89Gf/seRh07
%S+7I8r[H!J?r/hYop]if4&E-B8_hV*=aBP_q^G].[C8)%ICp(6k2j99o#'8)DY46nc*NG=rUugUj$87dCq6bF.!RWG!Hm+SbANqA
%g3j&Q(7P']!KPXsc<4@7hqibX3%H<*1p_1OZdqA;OZS!WI=r@o)G98;[LV,=\JFJqA?#b'BoQ"e)^RFX=S,Qd@i8LnBro@<OQ0uZ
%U05#s`H/p]R5g2&T&;H>5_1ON3GNArMWQ:'jnZs#:Bsaoa9G1[bL/5mQd7:@V)UBZXo3]'HX'k2hK]"Z.^W?Vf)8LI^pAk?JnsbG
%6+sf-@<5YWoWc/[l$rSj/FE#bm1u=6Fo)**M3_Ml2\2OU=c9g8YDrHg?iL8q547j?4LJpe$&bSi"j2/di2<opnc!0LZhEtf@XI-&
%8Og\k2[f03F3I"H(#N3nBY>\PP!.tsQ":6aHPIC8:RaefI97g<_g5-;*["-,^,eEe+16%%CQqW2o"B:XF/H=Y(2Kg:9G$Zo"pb*s
%\XiW1;`SST8U+)pRsD8\"kqM?Dg0f?^WW16[rFUCCP1I#>2J\K\c(=2nbUjsqDY;VU]16ANfE,m0`1KY*TX*q'\o!-DbF`4Qg;ao
%[HBcD0[^d3[XZ#ipsBU3?N$C8hS.(20AimP(^r4sBr;JkY*G:TpIX@'ot7r876!VtMk,=1Q>\UF)@4U<-gUTJiQ(?1[]9lNa32l_
%5Z-9]'0I:<MMc4LX62\PMgS\Y.dj4TV1NVkj\C`*RVt.r*(=*1=l8'qI++`SPEjCC/CEb&Zc\'L0R8N\\`;0+T7[49TNe?Z46UR#
%Pa4GtL%Sl`n@J,W7HcX5_VWpLoucIW?KLr1DnO\J"/Gn`_*'J!b+$iMren)Znk5t&*Fq?q=V/&Df&j#g\Q\O__,nP2BP._2,h8MV
%W0fZ&fP5kcZM/Y1ahsr2'_8AsoCYoH\6I8Tk+"V]GZ$SLnE:!'>kt\sm74?HC!/f.me1hLo1t^HR>lh6rH%E!o[1@>aLp.5nWnGu
%Mp"SXWFYPlb6TPBq4L^.I0JMJHOmH8V;gd>)5\9SJ).0\c=tRIO"XbuHbKesk*;&tcn9P[90HEnXe(8b)oQHgmp979D`r%!1/Yd5
%;B?:`iTIBcp\+3ua89d^55SeO:.6]-s'f)rZX9Z!X1d*rT'QUN"LPT>[#b*O+9d?kr;f:tTA0^mL?dQ@?$c)3W0_l(;6<Hm5'ut6
%>-'X<e_#`aoPGJ1ro)BrUlCd7%_c;=dZb3m5+)1PGocf2f%g3nnbd*LaXr#2CmB%#epY]7-A2Rl!#Gbs?5M2-'OSQ->%^$hp?#nf
%[%l3<9,kG%qdNO^07tE-?+6DjEmO@.;VNbjH&\X$<Ra!S!o3TtN/BJsI'n/?'4$H_['eUPqH2HPH=nr$Xn0uSVlM;c\Sna9X2,4m
%^VbGHiCJ4dVoqk<!,A.[ho,*;p/5?+O7Qed[(P#7\X-Z05:@8-%SfVhD$0FSHiIPZc[R^E8]eXjp_<O0Zk/V2:EC3jnF,K4elqdh
%n7JoSUKpPKIt:KZqVYn2E0W5Fo5Ai=]B<NuVl319.G`NM1^Gdff0544k+nO!T%$Mji_U`c=#$q.Pm]2TT?<kX\1()!*sRF/-U='.
%s%FpK3*oe945'S<]<qIc!MR'h98.`SdT7!2m>'bpcr)7ed+7nV0me/U,mj$]CGdM'IBmU=G@W6jUp8aK29S_OXh<][Gh2juR8u=L
%nNnaCY256!r'<o<9mO?S.kSNiFle`4OaZi_!WLHeSXd0)/>1Loq\T(jIHQCH5]+8PrsYf<A8eE7p\L1gDn\4ob+81^C4c`1lkK2_
%oe+n%HkX*DYY*d`QJBko_;WBL-FsNheae@O@kJ`1`spTM46OH'[0bqi+2.]cj*fgsT5UkpP&,:iBp)9_iq3Nnm^fb9+G!7UJ-30Q
%JZ53V5e_XB'AW,kf:e<RAbr1npd=:C^[:3DINCg!#frjhSVf7j*DiZeSOWV!O/)+%?M.$r\A,[]_Y)DA[doYuGYRarG']5CmYRh8
%EHu\_?X"T6gi<q7o:Uuh\!h[8oF,PJV5_V[H,&68p-.q_-)QBh#2GNel,N%-kP`j'Dd!f#9b5k<5KO!"bg/r5!,"FS`0,06)/R9I
%j^RUSqgm:EeU(=XCLl&Wc.'M1?GMA=T@t7A<_dU&BdGbtqNI3T:4hHdN5pt]=+1*`4m20THajRe*5+N(_fkdrL\o%lqd4ggrN1#4
%UHrB%_06"*G-)4BjNG-BEIR[2D0;rG6M0sAAa-;jFfi%LfKYA!kZK`L\?Z]d_\$#:mBoRl)I2+SrT'Jtff;:A]e<]ZO6R$G(+M&4
%^I#i_<#-RA*?#FCrI@P/L!.eH5>/P^mInOc[i`PpM3dg5FcVHGJp14B>$nJc>PaApo;T1-';dUca9g)hP7lS!0B]EJmpjpZQS]Oh
%g<h;Fo_Zi);R)jhjioaBL-/cmQ<Lg$Yc+HqnlM;bCYWbuTY(89GLA^X7[l]2B&lM?gs;Hc9"<2ZVn,a<OAmS\E;G*+R^;I"mPlVE
%\"<VIE[:tAaQEE\Xn'd&fDIe1X#6Z:0(B=NnWu9lmJ5)+qo/.;r\7*Yk:_$DT!c=s_@3?i#k!HM`&!=t5b5*D*a"sl0405soE#a#
%X.O\&;j^J5hCSCtWj]"<8(DaLZ>Wf;9Bn9#f5H[NMu36`MG++&gfCP$5AN9b&>c5/]obQ$(.LkG4o09J.b93T/!O]cReZ$65OVu\
%q/j*<D1BaBqXh^_6ia\14Pm(0msfBg?g=Pl^:M'^3a7$AOea<lFLi,29R.W*pVOm\kqT?740_P9#hmjI0)4+*a"8Nk`NSrq%q82h
%OXf#9pYHoY/;OJaDnn:q-p?Em._TYQE>(`:miQ/"q^W1N\`lTPiD/K^[7]0dhJ4c(\9\)dNrBnWEa,dgq,_oio@mG5G?V5s+>U&c
%+MPSPjas"0ML*=Ikf^N]mEMhQo6+p<<%WR4po7b/i2!Wk0!Kol33'h`XD\-a0e[[IoOt_hNj^u[mlb^K=k8'#_E)!"pds5N\!CC9
%CfS0(m`#&5FS7"e4-WeSom<;Qj1JN?>5;<#*j2oljI>lN:K7Z<ReIsBG^I/_l...\s1daE[_;Iu^`m(:Qh'M-?DGoGo+jV>F&V6u
%E?jF>Z#h<F?Ba*YgXcFF_/$A=f]n+dAJ:HZhInbDW0ZYi6-orgQ^sf6(P?'Hp;4qe4\?r4d1?>jM$`X9CA%@UXiQ3kTMZ41.?*Hj
%eN`GGm<5l2rU^_)POU\_VK_9;pp&@C='R*AldB]_]'L%2YE_BX5,!:3W3H5Zf>Sib]<]dQGWf5rmQ'K.'4"WlLA5u>ca87IR@oi8
%fmlmX(t&eqhTF>PXBn@7]@@<H*$T(l+@NmC&QSa&S[S??R>/cIrPm%6J7?)0"Y["CinLm_?E-r"D=%ojehV0iCLm:gl_##9W8>ek
%>?CS"D0CS?$6B<38uLN@3MIla&*@84gppo<4XH3%p\t!#])O:7fWtr4lghUX_*.2U_U=k20o-58KO(`:p*`uNor3?.A0g<uFV3Z$
%ES@BN%ra=RMR(;%7AB"!mN)nLb\B*f)F5`8r]F>^L:dnD06U$*67;?p$%ih+1J$I!l%Ki"`cVJkUk2)^@u=d/=>SK+#[14h]s1Xm
%.:04.a'OrPl4T]rF9M<PC3;f#NGgWO<H=:<&&/WpS.+k0]\eG,%-j>7SbJR2_RtP%,J-2W`8o3rk_/6J"2i#,V_os(1cclXCgEgu
%X*T#5O(s]:n9"C8Noq+aqd6ZZ;1"u'&Z;&Ghh5[%D'#6u0mtuYq%"^;T#(rZ<B@t,f.23_rQa'e:8(^cWt%bK.VS`e60CkG'A':0
%4R"!ZaI4hhGeL,>l++eg]?oVn=.$:W3%8.Y@=Fe)9]K+oJ!p90jL0`R!Nm)-@N%1E_YpU*3GuR+OuW[\/04Z!QI/7^Tn:T]Vs$n;
%'>0P*1jh2TFOLBM;N>Ks`MT/K$"Y@3)UE/uQf.PhcJaS*4ob/[h`Ph&p$cG8@@%bNY$CP#Z;JZfPE+8lfQB#\_k*(k3R5a>eN66L
%Vf?jIN1NYnPc&N+fJQ"J]@4T_IhFWYhN&'G/KeSF^(:L=6B=O>%P*+nlN7pr-;X6T&b44HHuAMDXL?^fDj-9AW&X5N6<M4M:8#p5
%DFqn$02\d/di9&GeY3Gm#<d`B>O43)[2WW+d^1pk0OM!13:W-udKO99M1a&;_e6auO)?W0Ze`^K5Gb9mal`QtLRMZO.K"%0gWeYd
%lC)G((DEM(o0<7WVUB^?A[t6$%-ZHM#FaN;'f-dH<r*4sZWr<,#0#JSpS+WSmiZ3o`,6b?=7BM/Mc\TO.j,5Frqo.*jRCKN?V"M+
%NLpaOO2@m7s6u.oL!pK"J)e"dq"+Yr^G917%PjZk.[fRonDj&2J)FgqoHIcYE8(52R=E4@AR7k*bfeN8r1f=Va=F9iS+osqDA]s=
%&'ql!j!m+`+R<3kV;^b4Q><EK4s[>!MX+gB+aLuF=6XQ@?_uAH&.'G]rqo-i[B*rm<b>'ITXa.<fK3BJZaT+e'!q[96d=o)Ak5b^
%793J!'gT3u<AiTC+;5@@HIc%1-W@j]7M`Q<5g)I;()55kGHQrK*H*%<RXeC>YuT8tRPos4<n3bBCFb4fF?l*P:'S=C(m]n!pnXhg
%0se<jE/8752HH*!1S@l=%BS&Y(H>u)1J64PFX*Y1>#r%)#=1i1FTE]hWAaG\#]cR?L_6=-!c9`o)@f`#^0%OjUcE0jFeRS%SebuB
%LW_eD*C0WPWOdI@=+TU[*5q8QMF=dFZ=#\MK-Htg3cl*#i6@%cb%/?<5R?;#@k5VV&.00I@PVB=5o;FQ6X_[N8/cU#LAiY\A##p=
%n;oJo0R/W&`l6LorYc41C'Gb3gBBM#\ci.%@rL=Q#b"C/bHPgf10)4-@qo/b1`1UEFYt(bbuSch/2q@[+>JtS3_YbH?o\lH1oN$d
%!=Xnr*7/i,i=J%)/D,QRb6*Hn#@4Q*j92\APift[Ng;.al_\<tiac'.+GQjub;O%r8l49e=un?<`>RjK*+IPTOJn%qNM&='ZAQNd
%_W\g\!(\hq99,=S!Aeg9'ELPGl7aWt,t"N#K]iWP>a^k6@=kF\2HO9?a`1Xc7M]q\&PuPO<-'ksm&Zsd)M*!sP_!BHIoVEs)RQ,'
%nu3R%)elGZb/d'7W*7c\5l3<CCT7L].FpakdPsZ!<N)r18Bj2U*XACg.sqPS:^)Ng[;eH!F>,h;WbQRd!eb]%"')f^6%QWj`Iptk
%SYqWefqA==Qd`!KN*H?dNl1X$_[oXE_ppb;/JmS30H$+c(%JWI3U]iZ+d2rd(jZ5r)]beo5laS[eX-?(MQ3GRc70#TAtf:(Y,.ck
%Qj-8CKg\1GEOtBeLk$\o2P:&-E?2"40MY=H2%2j9TEkT6AI/oAE!0mdW+pqR+ZFt$&2Ar+@<U:"0%.'[;/B5[ONB<u-n!!afLUMr
%1Ji3*gGLfABSLW7C"U.0`s,CkYc7d?9X<Vc5o260UnT_CMnm2g%[1"+$jG1]g+E[B6>]Fa.-P%Ro`B_eQ`*145_gi#!iFgR$jL_l
%N@>YIHK11X(a/"1MiBu'5^F8<<R=ntC)41.b3B%T$mBl,@q%aKJPT[ndBE\]#mBW6Ao+aY&1Jsi5<^\F("@?h]]$0,B=\S'LnQX1
%JBa`'<5E1;O#`#pUZ1Kh=WuM[nP0>o'0`;fYuT&rFll.AY-*rC6r4i"P(rQt_3$(o#h%,2MEmmg*sE,Xg([6b^$8]ZKo&@i7SIo2
%+uLr;8.gfMWL:#C;--)+K71I22;OTUoaMj/-@?$NI2/OrL(k@[8=GN3VL^Q=)"@ffQ%k`])'b5JN<)=)D!!_@=UjP;@jp%Mob#"!
%JEC?"3pO/N)'HPWOm"\//PHa<d;N;\O,Eg,-Mk$-Tm1Lah^8+'VSO9+$PaEM)s.\K3/;d'cl^i*80S3OST/WB9Mc.SZ8T3+MJGe.
%)adiA;/4teq1kGBIZjNrSn,2McJd,eKGie%3ZFS#8;[q#2%57UP=#cTbZ$lM-(5!nN3E>/dFD\0/JoP7)A0Ol,atR@&_$hs!HU^s
%Vk]q?@nrHmET>A,(_mHN$aD"7^!XADN@\gh=/Q<kL2*ZRJ0Q2@\kA>S#B^;u*Q'?3Sb<=W0ch/:KgN8I+P9Q3emd8U&9!m"L/9#D
%ehM7SZ!dV5MHt+#J>fL3?;rPQ+[e4Rlcnu5joa7QQO=7K?d1PEHOaXf1VmVK]R_bAZ!C&J(o2L)&/&Q+\o9(aNs_oN0A&!q&VrA=
%F[IR?n"LhZd"P/Ng6J'Dp+Im3&eSOkT_:jcq3GT95#hR[_ihA,9DbC02kY!r(*#cP."'A^nfGUJ#A5YVi@>9aYR&HCng?#2-OhTb
%:!1r1[[a-_!F.=4@i>OKG&Yl=)MNeV)C6pOBp91"X?3B6KLS8@NS]qr;8>iTj8O]3,rA4r0I/6gQ6c1T1^YQMS,nVD1'^P%.-(lV
%2$sR71eLkH<Z`;c"QIZQ1^^aO3Wp,%9#52WNN3a'MQ;uG>bk7aC]i2D\5)!@<p$7^(%fD62/LO#\KiU=M4L:C9N1."?4[d,Q5N%+
%JL#D.d#\8?\r]XL;N]TLFYG9^OqFB,T_I$FMX4t$I#b+uDldQ.U%0p;`;qoZ?7SGT#p2KbJB4SrLS?8oQbn6FFH@BPoG@*9P(.<5
%QrmocTo*$)&fKUOAo3<n7f`eF9F"X$;\_po6(Fae`%A=$]#*HH2f!-cW?>/o5+/Fo63[GD$u0B[Kk:GLoQ4)C:uK%(_A\@5<GKcD
%B@jF;k^\I]@?"t:VJ.GS#S#E=KBa:>Rb0>&@j-afVONraimA[c'SF9$>)m#Gs3e1]eekn(3X^4Ar#l1t):Zd>L<_qt)q-&<"W=ZU
%gL+j%<1OV[\O&aFiObj8X>Te>.M`3f+R=p-TGC+naeDEErHNoTQuf.1(sKQ"$JrCs;[rrkf6&XqRV`)E'Rr@i@H8<U;))-hZ^rT]
%823E(QO\;u#%hLA#'KHE*7nU^;ba^#?pG"Y)Dmh9$$1o$lr(4LZCYbA\g%o@72T,bi?:Zg<"?<4VmDEJMPDr".maqlI)(+C'Vn%B
%M<WAAOC+>?+lG7X*mVWA0IXm'^f0Zn(`&;_'>sq6*d;"7h-a&"FGS1)'U[#i!ubj68J,H57H72]/&U?a$k$;qJtcR,(g>jQ_a\ml
%<+5)H$I2=Da)![(*]dlE$E`T\)CG&Hf*eN"L.SY#RLki82Q^A#coi2,b9.h$KI,tq."nW.`1o(K#jPA+*k>Pd.`D5*TgT\D>:?K[
%X$cAiYSe<:,(ZQH85R]N$(W2VO>e^:o(4N_E(masGjl5APbkI8_A9CQO#ZJVW\Y"rNpNg,1Qq\>Yqg\1p15YSa]%0.j?nc!&4r4;
%-dNR9S46j[Snlku;4bc5+M7\'!VgEno[W)E">NsYbC^eGN8:?s]`YmlQj@F<0\FGT`b&KFK!0h.ZSni!5jB+@3_Wf]7,d!^$>fhr
%4B)A/&21P#n'H%;\7fA.2<-@p!Q8Fc;$@(Lc=-D]PR2dbSV$QuAHMt-n;J60JG<.+W=!#RIPprTONQ-kE(S,^RU!`?JnAuS<sM4u
%"O@Fi(=:E1ClB3aXF\N.#53)D'90LY3H`s!Ou:^-.?\3BT+#b-RPPsrh-eGu&HE]q5%m:B*bkM1mPmm`fN7E'5kK:%Q3UBo0=kY7
%DSfIUSGrl5l]0,f)Q;rb.qNI(BO&[q6K'J`#7q-KoSX8aFobg(WD[Dh<_l_RjO$u6AE_sPbleUA,MT3Wl6d9b(gf+R7R,1ZTp$'^
%"tmf%GoOG>pgDNkn*h!tLJ.FsCp["op]2]fM"*+saho2L+,;E]*AHHj5`hn@&uirqOr?6DM!`U6.^5<e6-B5E\Q3+T7ol'E\8u88
%!+[nY)/MC%?lFJHD`X@\W)+@gWkmIMQ"`2e"VuS8b7<NdlRB)9X"5UK[3q915.lmJ84.rB@F;q*%N5,ibr?CX*FKJh2*e(Z7iHKK
%$6U#j)K#SU?sR#)B?Utl_;)R.@uil&JU"dAk5>Z98?`,RP0ec?G/:GHgD(iG2sapO0Hq`02aB#49@*j":<WmV#\,,YdD71R*nrTi
%F[^G0l,aIO?lM68E[5I*k,uhWg1]+rf/4Fi,:K^ZgXn(h)k5tRDCX$W5*;i*+O49C-1_og6t_*6g^mZmiN7.WEhJ8!TP%e?+O$^`
%-<Np6$F?D"G@A=DL(N/@Z&H)Id.DM"fKiBp8OLD'<=t73."i,pm30Rec]-o?)A=Do`FVG3!YMn\q8SDZ6N^e%'!_ce)Qb\p69nD;
%5h$\q_gO*TO=iC?5^[Nrn%sYh@051+Xg]ds@7ZG^2oT_LJNg6p=u=o;gg2;TWWj;QRC+#&$j,2CfLDqbL7PIrUPhC3?-Z[U"W>2`
%9L8tX;_TndF-f.^]=`c)6&@RPDNN_)9T!7:j)t]lfjEqd[u:nuLJKT7dHG=+o)gfiV]LM\2D'At8;/L4>@Wf,-t]a?8i!7L`1,g$
%?9g5J7'$a#@HPA5j@2/*_V>1W)$e9SkEq!#H)pLo:D/l;JdVsrl`_7^Jjn9+Mg/uOP\U9]\@D!,Ah+++^)B%L)2JWgeFsfk#fPKZ
%7Z'PBjFX(;,]nd)AMZniX<l(pfY+Lk84/&GJCm0HPs:2gEs(d*:&.&pZ?2X$@+ks/`*cWeSJN8AI_[c`n6hU^k4,W#dHK!34B\Ig
%>,]Pn)X`oMTEnFPMh=u6a$oIKdFaa%o__r0qnY+s/E,]Y\DI<PWabKDPDbp-&7enMN<+aYA0."RUJIb.^WnZ]Emb/OU748rU>"Ds
%"K8>`+G30rW[@MX2@g'MX8p\IgULCB12Q%Oo5-rTkSB_j+@<mhaWLkUI2L%Kd5e$c*2U8$s'aW_KA^;*[&(dXk#ja.TW5lH<F#Xa
%U#$YF%h/s%@_G]BEfkrW.*hu*_f:CbC[%i)3b\D+aB<&g_c#:\Lr;eYCk^;F(=NVV$HglHfJ41Z!5k&0K1e.rotl3c'+.)fr0taA
%dbFug=4MH]7(>/0-&NR0a"e)18sr?ApJo7C"PTknMFcT(1qr/$Ed9h^hnIW0kQKimMc9mbj.ZG]k/@eb@%eHC`>Z6T#"c\V^o#,j
%f!QMfOb.r5W'<?*=2V\QCFG^!Hu>M:K*Tc/^)IWg5\+C[#&"crI)'IT6>`GqAn`Hg$lYB9_61ZnMedF#W\`g5[1lYb&8ui])=66e
%aH+GMPh7k2_RqGeP=(^l4*<nu"+_d+KG+A\go#d?#A_C?FE(%/,N]QU7(+m5kFs:)3C2>;peDIkW$'(`Ic1'SNdHhlQu1b<_M&7#
%RPtt8m;c;RO$mR6l*(a'pIq``;kd`SBqfdkKa[NE'[&h!`O1$u.WE8K=@#RS!^2EXb11W.:S;SmMkK&6q$;XNW8j7-`>V'/fiU;t
%M?Po/G#Vpo2Jb8S("hHV[+5gU`G155RW&]l)djE13##j-e'ool4q*';%^OqK0t`E30l4*Sf?fuG3\RL!jL/Lu7LA(Y*C2Z0+]-(h
%$eeiZJ'b>_6c2&g3eD2'd7pHV3CBPnSLF(f-oD<'1BBtbE)d4%CFdU7i<ka.4$X3Jff5@.1c1Sa(,IQs`\?GW)&(V-1tkf[5`PL+
%,NUi&$oV]BB_ZP!+;fb?klKM^N;_@Ij'7;?l@<Z2/JF\J&\pO5G2VqCOE4Y<;J=HT5Uo.`%GTY0F"sF*1MSY>DJDXHrqQe$^m;X@
%kI-mo"2\Tl_*"`8it2rg<i(mZ$7uI;:pJB,a.acVJa$k%q`qlpJV,(r_"qh_f9QiqE>*dj`hibE5YU6N3N*MX,);JP)r`?W3"o<4
%]lf@o88Um/W@nl`FBZO.8/pV`@GI`<]X6GQjO.i@q1de,*dPHBn3#Y"X"TpDI*iDhMkXo1b=ea8q$%;-0+LOdUF&K&5i\UbTG$i:
%R+&2O)^P`$(]'os;0!e<!KU=%VL]9?`^WOMihIclnPKXo8)+nt8._aR&l`sV_Bqemj@k+dYMg!EmP(lI"Npp)c8#Ec38pSM1u]V[
%[f[mYk3BGW`K>H.C2E'pgb&iNGp]2(SqY]>?A+;/+K7:4<-2>2-\r`&9p04XV#_r-_6aal@p0.tGX2XWgm01;E)FN]i_2/ta9?`h
%7]2sBP*m);$Lp<#BT-Y&ooKte,8*Q4N<C!PQI#rt#'i"*+67<:+1r=YHI_LUn&S4s[ug?A+"*?h-)UBP4_[5B1gr^1<432^`/%g8
%j2M.J&0kmU0G3H70cP_fC>_b,m;c%?L2^hCL5>,XD%M]FbY$M,#qEM<TbG?Rnn(LQLoR[X5&hf6ciG@Xd'sZbA#&,KC^XOcKP7kK
%->l2$bpq8'>32E1%H5Ze%2%,:gE7DkR?b!80dEE-#nt/])s#0r';Ck1#B\aS&9P^@&2\8k'[6QqNJ1kVDUO2Om(egD%[1[J$c4"m
%"2]Qpqn_Sj<^APRZRB6X@ci;c3G(Gl@=rqFAj-pZYQrDX5mPU=60%)p_$u-=6fFu(P;F@HO(,[To)YE/1acm!3%/3!3&G&-7!6U$
%Ldkhh-1"@MI'@M/bQfA1O>g*S52O6Lpu7Hn>7O-*ED;-qiQVcF]]2RTgjFpPB&QcfgQ8'6EcbPj+qSAK&S0q99EnD*^PVi8*DFWq
%)IcQG>nCqDJIGh(#c-]!5\lU$2+:dY04\Ii#o+g)G"'<L!Xoh<B]@IN"EN.S'YLT!dQqGFf.pHeD.ZL)G)RPDTlt-3REC.sk_!VH
%5nlYL254iC`^%,s1,;N3hq-LiZ-DV"QjVf']Sd$F&-U:TapV*ISOKjf_1X>>ME=C'Sb5cYEMEO%E2#M(8-QA8`]u;i&JPc#TS`a]
%9FB'Dc+m-cg3%5#5T66I[R?0nS_/N=AEa;`K3>+k#(/Zk$3SsmZ0C@nZHKaITV><CHGX71WS!kW0de&0b;,</(T(;G?l4VcAIL-i
%p<U/bcVR"gceQYm/)G]*F+Dqna4A0e,+FVTLJX]RGIK#A=c*H'=TguD2\fN=$ph=[o8Bf(7Sqk]lJN"mLsF!t$f"Jg[4=Lr=<@^2
%+!T&H_ih'QctcCh&IB`U-A%!.NmNKu%J&Y2pFi`1;b$/d\6gsN1`R>S)%Ml9`W`OK4UVRLgD-j/\2\^WPa85B@CEH[3Acm]E):pe
%">i:p@<IF_U(I\GF[cFi:.Nq>AHQ2rrfI?(h)1L^A/C"Jpr/p>,Ok1)B$=hJN=36kJn+#;@CAG<B&`J1Y08R#MDIpkisZ<r7uS!r
%8._aR&l`sV_BqemjNRYl*W:U3dI#SKlhEiCdS3ki2eAqh]ZK28>W3WNQYee&bD:+I'./q`*nNqZLpUDLj:K?3b/pkm.l&Ve_LU,[
%CO:\,iK@3XI6JRm3Cp1i*1Bt90se=J(eJL%$n>bc#pVB^mUdGrZ'8]E3G5T[&_H)V/RI5KZR>nbih[Q:'$7P9Q/aHSqqL2h%*T3e
%K.7B!$aCZX>)kr^&)[>W^ci$`0\#)Q>eDRX9/Pkl8Q7jp^Yr"?Tfa%Xi'%6(Y%=?Rb6mKMjUrb2e(,KFMBLGHGX3>\,Kh35b1#$X
%W!KE.I71T2kNL-(J2gPa#fX`_L$3hB>-,MV'Nc0E$LQY8W*sF;QPM;MNFep$gXiDWSRWuX5>$eu5g4cd?;-+sg-\@*/JkUo_inmJ
%4W(8bC9nHe:MX[ABsYp3+W[l-eL`DO$:[ZD8>\:sL2=-#VLcp+'(Z=;/@PK3p]2m+(hcS.DRAj;G8\$`@[r?BLLIE04;X,(#_FLj
%XnGmM$O[t[F/9%.g=`7*[6fDDMTo4efik)%4(&bhKh;Q'+tdc$UGa75!Wcl#6W_O4QL1o!<D1.s7D.a$dc@6*_pp4(M'/(Glct.+
%_QcPciR$5O/oH36c+tQfLd];4QD"LT[%hVu+GdH3jPo_4Z%A]g@N/W*VUN\eKt"#F%&;'*7hLNmhBUeE!1_#_6,fM8E:=2iC;Wq'
%k[jNC1[hX>6X&s^.IfP>;+INiZE`Lk4>%""8(qfF9JGr=V'4C.>G-(AMl+I*6]Zff/9%t,_k@R3-SWEDUhgWe-r=Z(5WB];$[H5`
%JXMa[,%dLf6#V\TDRm:)e!6Tf(_i#Q.dW8#KOHi>_Jh"=fqbrN\f9oRK5'HZ$<@WI3g5/k46]'Z#?[LmI"D@FZu^5I)%mX]SOM^B
%"YL**D9e6:kg89$>)4d&F[VuJTYc^&ZbAlI,dKD8+d?$%I5QTj4Gq4^PDZqEdj:rL-T5qe3-j_RD4<:OhIn*!20Nn=KT:5>3gM#<
%_?#oF4W1t4iKcCg@CFEWGW;cSm.>,H9`Zb;0[]Q6XS-V3<<&QuSs`A'pB#92Fc8:k*%"VHTP6+(,RqYb;>j\b#;gV$V8aDe0Y&nR
%_.j:`,G7p4:oQlJa$_m99X,r'IkB8H+s.#Sld%u/.-8UK+cVLdlKGqb1s!8FD@"$@FXH^*";Dk)mPgN3pFVqe'[pG4<B&V-$=:fI
%S!5^aGU'lS!H[^WYEk%N\m2fRNb@XN)2m9'*A:86ONrkE)O,0e),.qb`<`_O8lNWX#BS`SC0@+:8XFrAR)5aP,jjc81qlm-TGC*/
%?E/Q8SK^J</!8H9I2QGJOY&WM^.]Z9Dlu@(M?ePIe7O%:2*1:UEGC$#TrWP#Vg?]0CH?0NFsi%i[Y3tDY"MUF\Ha\;9NQfi8C:.L
%`DcpU)C,m4(3kk;_WhIVY%(V9TKoF75&^Wnm;c#HhFA(;NW`\5&-6dOV.j,1e:nBh3[7";Y9e"TZltrJ_gm(r<SB*eIN=["KP(GZ
%b*8RS1L^tBJETd4##,PM8Z\*U.2KOd7u$%!:g?)>Y^m)?%@qO?*)qagO@.2"lI`JG<Bu[9K.bg_gQ4]uBAubQ[>^-p2M<jiOVA'3
%$KL]7lC'hQ<VU/:#tP`VA8>g-"7c9r](;f`3YI6:$U^mq,)1[O3fsuIP<c3PWYtn<h!i?BPmV=]]uX3;RcP[+lmDQF(6#1'kQ[sp
%O-ADFaq67#R\h#2I(67,TK)146fI,k[Uq<2=f<NU3]W#&(W&"1/r6uD=LofRP<ccdWZ+6(d#=p4-$4N=ELacHi_,K0K42TP%"W;X
%hLFl[,i4s-Q5F%*\->aK7mND$`=QfNkY@&12NG5CdBlmn;Xjff@A,P5;_Ekt*f?UXF:sBg96DI-h>i20M9s(df2^@_gD(hLV6GS\
%_2&GLD1L8C(1]HNkjSd6cnp?d!fDO_.Rh"`aYbZq+pZ`1,VhB9ZPRG0'.[bTrdId8-\6NSS@nu](C?OF7Ri0RQrGHL?35-?M@PMq
%&fCc,+MIfB+I`_QPZCi,16Cfu3q2(mZMqh,&Jj2'&Q?e(?M:M3Z:Y>)#*0!])EEC;$9<\E"Y-5*C0#4.d`6Ck_L`@+*8Ma:[k#JN
%.n;PB\3?4P>_1nR@udPRP+%[#Pk6]5Dp^#"80>IR]VoPM5*eHs5*hj.JP,.9RZ6o?k[V/U@DRa.Nc#-9K45f^jEm(>.ugZndi+lg
%$C*n@V'/.J0rS210?5aTLIrCunLM=lhR\6Ccrbs:ASopt:$/\4/qjZ79#P+4Jc["p`J=[k.V3iIG#@61K3br^ashpOb_/%d,]%RH
%\<`8Hje+rALE+B2eJL-ZU=skO)6^]:g5nQtB-\no["M.M2SbZr/ULH*H[*l33A:p_RMZ8>NH6,M&I1U0U%%EC"N;Z)b`tib<*]6Z
%%g3-V#D*$k"!MDPr"X(e`[:%GCj9'c-$4aI!R?Y\-Zt()ZD5rP#;q[hpP=R)Yl^@rUBOGX0D<NR\O3&'L0FK[M`hoBBTPUA%H?*8
%AgB)A"\//rV(uR]GkBGOd,iml/'((ZRrA/%\[7T^pDraujq1SPn\iskWLH9EMU(+LLrg%`ps+rb,WP7m\/o'+f9:tW271G:Ee0eA
%'qN+)b=//=)gLJ'RMZ(9]>I2Zg>,'%K59JUYa,r6@rNS%Y9\tA!?#($6Xd\hiXXQG_f0:B@Dl.I2`Enh;'hEujL"HS/G?01k"%3,
%6-JV?$Wj%'Tn(Pn/SkMEm^U4mW!'tMF^0+/V[NaL$uB3=6>)rMM!1RV"fQr1FlSKib4u;kp'.CbA(%r/=<6NZ9J@q%gdE)4KBPKK
%G0tF8`>aeQYdG*)*A7^RS;bt#!+BeF9FI&4'N"-*'1TMj4i,$6\ThNt^/,r'n1?0i$pXs7>Oq9/M@^Yb%c5eX2(Cipp9"idW[iV]
%(_Cnc0fbE_92Jl2\(D1&%b5Mk^J9tb6`G*r(eF(;"N<Z*Z.gE_]H\87">[;C-pF:*8d"AL$ZDd)\.Z`G`cXBlJNSlVYlTiWpkB\m
%h&`<.)fJtL(UYbYKp](PBUQO<_lcCfWoF8s2P&2"Vd738'f&;mp'?P&fI_L6,=70b%=/=SRUdC;LegPO/J"DLTrG],98RaQI)Ior
%i%;oq0,*3eUX<Cp!A-++_KPndW(r6o.c8-OdfW5tOMXcAb<XimK"(A?f^L4`4SL'X.mSej(BkL7"#J;%Lf\#-]WBo>27X;*'Qk`,
%A=\abKqo/uLA@=e&,7UccGDQa">nCZ!L6c<.04gb9a9QF''sp3)60F;*oe-@6K"\bEk<;*kF$k?GnsGAGS)hXJY_-n:sj+dSKMg3
%2hfn=OW/e>$CIW&['>IZT4Alkq*^Br%=E($hqhetj\QuJRmYAApeCt*E>a<M"9C[+DR,FuG[1keXrO,[V-mo0<]QfclQ6@tLNZkX
%[<[Bb$AfA)`S+mpV+OOGBbFBH*'?YZ_N%]3U1?e;@Ka<S<J'3LN)2CKL0$snCNX'd!eMU&QH!n-3YVTHa.T.[j^Hu2=6Oc9@RHD,
%Y47_$/jYejb+WfU6[/u2P\he-0FW_/(i$O(`?Cg_deJPC=6FIN"Ea,b?^2\EFEA]-Dsad=Uq)e#9->2ngl1L]DQFsgVUmXNF:j<f
%bNfK`fO0(j91ERPXB&iuEY-c\3Z&V@W<faTM7q_=.!A4hpi7_"a\5/J+MOD'YNt0O4+(6RbYK4T3-,Bo7%/@WA%WpJF(1RmF:j<f
%bF'lRGf)c&Z7M\*n4FKY_-@%AfMiD&$k%ehK\2I+:<J1FgANSL!QUi:89uIHCrW@MRNXu?0dunD\o!<m'#u+^D,PbK^X,7mBXX0S
%/)fRpbbh$\,EJDO@"&G9GG)m[6$JI\40*L_7<$o\TC9R>[`eSJ%%Y,^nZF4*-_fP*@FMqpd$;'*n?>!2p)i+*7PPP1$nRTrPD3Da
%Nfg.g,./_\V:0Su/O@r1?BKB*l`TkJK,X1X-.HsfGRZDk=<;8)^t7"KBio7l&2.tK_#6Pu>],Y[J0i]cK+NjkF<EKm+RLMKD'a4T
%K6VZopiI1?7ZB9]2d4pg>&Fmo[$i6O"J6*/]Y-V<Za$p?J,>^#YHb?,B;l<('8p1M%NgNdaZBj'jVS]h2W4=,l5ErXk)=u9)"?mG
%9#hl?5]L_SWsT@H,$mooU,.f)#Kt[EW(ssV*Ku$sE7$,=;96o=+s+FLb^EsD0_j(qNK:@0oH'%;QhGqd"?:MB0.uVU(-B0[9fT#e
%YLYDtC2.K@4Q`A81_i>^:h#l)MlI2Cb6PQ)#pHH`nUgh!L$sn/l@W>f@%3mp]3'0&Z'b*F+g`5Al?K_Oc(G8)*DN]`E2\]rP>X"R
%F,rU-oH!$g!Q6j46gAq&M,>*U"Xait^31g-$ZAe\I(eGgF)H*T]A^>QrV0WONmC]BRM[:W$o%j^\mdMLiHf7iEOgJT,NSX0,e\UC
%M$?076$MdPTLrJO-$^H"$+HN0_$ho@?7KjWF]C?q:eYTHVgos^;f/+6;]QEm)2)=fV2P,<6.l8bQALMe<T:;tK3$T@_oY<;#sf<W
%79e<t=@%ld%2kQ:TJd0?DJ)IcGk]?8?q?$f0+g:]'fhR%U77Srp!%I31gH(NeTj*ej:X1-VJbp]N.g7\^fVu%qST#sXq/-Vr,taD
%VV<u^)iV73i[+Ru"uKV*$AtJcKNda%Ym@@DoI_\s]"5E<i++ZMag1DgPRi7m&i2cIAGd?P05g:rlL7Y171j$*(Z&OcQ/:E:\#<8j
%8UM"C<saIs6a@ZeYn_n.].rjLF'N/#0KlR[(;i8T4=o@GU$E>i^o4SQRr\ks=`9RJ;*\.:ktFnMToMD>Os%W.LX&Fe't7B4>"6A`
%02<paR?<pQTE6o*\k33@"I'&,`J$ck,S[k(YYuSU#+6H9b@"Yf%(0rbBom=/Kc$=d:j)!ECjZVLDLR^60J!RCRpCcc&D@Iq*750m
%h"2_h:"aY0P?mOl0o)mAj.!''BfQg5bT7d+n1*u7MQbsLm%>G+E![Ef5o/?iM0E+&$mRogC\&39(>)"E\@G4u!7:]R%="VPHWC]0
%lcpn*Qp93eq@l',B!H.NYo2<XVZq9thW`!L(fYbjd.?XBC][Rjc(N'.Ribn>clA8@?.Cff4gqDr-NYM@JkY"[QITt\K0V+WRW,jj
%lbdtZ^I%h#0^D(ZOJ?*Z_[lBM+$KrSK1IU7;--";FbXfD,<F9c151)4W@+Q/PLF*`,qH(?2N,Lm>;IaKUePLN*UcTY?+)kj181NX
%Pe>2LE^C//\7=-6fGhRP?/1G_(Z.]U;CncQE7:Aoh\N(^EI%RlQ5\8/JQEKs'qe=/(e>u4Jm-A4,04e\$@Hq(hlt%B<E_tif)bY8
%>1=L7&"84+dU7K(Fd9QqNm1V"/D]A>YW*JX:fC<f2E2FIQr$TRWO?cY#6\Q/QBtfJUD^"Nans,6>kt6.gqBnSU?B=4%#Ds;:%g9<
%<.?ka6GV#-s'UKZjJ>*i%Mmmd9FEa$E^U]b7&&GO6R[-/`)d6.pniT,Gji!!nCZL$bSUI^JBfpc&eK.(hKpFi_ip<%Jk<'O:a+CW
%!QDdGNhj;4U[!)/T:CS5&IB.o7KW-E8'"$6#5M0l-PK3Pqr"Ik-JS8CEC`@Tj!(-/_faaMBZ2)Z^L=^1J^O!67"",l)J.&Dg@E#b
%:jcXR1d3U%on_R8,8*Q4N<J@VNj+55%<@3,ImuZ\dk$fQi"u^=)9.4?*t5A+G\0PPiMED67j()4p,n;XIQZ,2CK/_AEDW06!ZG]R
%=?YY2fSBZnH6Y^E[j-!H[K4+$Q/no9KM>/JN:aY0.IO&APS?>g*Cd:8)^:ljV[(MXF=9$hoE^<tW%H.!"F*JdFX2#P2d_TI>i4IW
%/BJafCCP*$R1p)9BKSc"2]DMIQYbG2TN".e$>=tPAdi@*2"N+rigG_.Ztn:SA1]t`G]/9'-CTQH;\sZ:r&:B"Y_EOmErU*Ph;L$I
%JiTQ"_]cB,K+]6n,:'K(5U?iH3"k$#ALH3\/\JF:8R`_NAI-GrYRY7V1d(NrZ8F0a_`"1G"uFG]d&@rN7+3uqjqW8l<.[rZ)fAA[
%5g2UTZ"Mj\`f:?m,`:p)(@CXt/X8R*#"U)qn4-]Y#`A(/U&,6@p7r]\?/jiE^>>Zi*Kme6cXVEOdtuq@a2LjYGDmc&;[/jF742o[
%:,tgLr3:P:WmJX$gacg)2h["Fq/\#:]M2-&`Mech+]iUn%5ShElNVSRSr18@/M*86JO&!cjD7XjkT6*F>fB)]*>QQV9+;W#!^:q0
%dK>K=:"I:R"]B"FP;AGEd<('Ge*NnbSp,2D`CC&FNliS$_o6T>^cPY8Sl+FdmdSn*_do/P4)85Y!+2d[E1Xp-Ods7pYN<i>R**M2
%b[BiaT(s35PqeZ9_jmN.5`nT`b0cHsiZhs?h45t"*!l3KA?^i(J-pu8EsB>s:"`9HqW,g>p]@d;;DnNeUnaS#pms=u5(a.HbaTH6
%aCjOBl0K`3I$mf9OCVePCJ]7.k8!JP50&YBYmA/8lD4biB'C3p#;)i,>l;BU[AEWSA.X"O3+`?.jYDKM(0ehFnf1#J;VQg*g5nuQ
%:.E4ts6X)rX(=kbIM_nmk=(IR\pEI$':B*;=rCb$dd#0]_GKYaeM`qtC9";!q=g([>V[PU>,O%!fqlP6BUs))MN!A(B1,5-2MPAs
%l"H_%Z`28-])+ZKbf(S$P*)XQ60Kr*&%GjQLd\2<ObmMnRZP(j1FSdVO9+$2drjKrWfTtGbhX[,AJjKg_Hup!C8IVcfsKrdh/]8i
%MZ`WCm7^&9)V,l[@\am7Vtgu>l(Ea"8R1.U@0F05ZL[JcUYe=0IB*!g*it?fJ&@MFQN^@i/dmASe55qe&TA-prLB,b6Z&)`d8`6"
%OgFg*a!kaO]NfqO.+3.7:scU:5.2J&T;.Ue19fkQgRjO4CTTM3);=I.GQaQOrZt<3s'3rj0JOBVD3jO%R:fhCB/k%%U'-V!$:?K]
%"De^NAl_9T"IXW6aNfamTcXiBDWM[r#c[sI2lCqB&3:EH9IMkcNT_,tOp#H*42m4bIGg*DoD7;[)3nlNj/Q4Iq^Te\+*J@Dl,2iN
%,>J(%9oh=`5pp6cApY\Q7OClcJaJZ]G_D<cSP=*gm(0,:2Ip3Md4-Jh8R]$7;sW*5h7s?(/%&1t4bP]9;&g;uMH>kuD(&K/#jb)7
%l:u1<"!W(/dXV()cjO(T]VetN76Le`Xj0mT+lS/VPDS9G%u*57%WV;K]!M&:oUPk,Pt+-ZeO5*'e;>fBSET*]#k/Ig7QP&lfAUW0
%eV`ABDXS>0iGO3U9$=1OgWW&/.hj.^9DCCJDi,]l]$i56dk["a8tSj84A4=e>AA,ScZQ3e+Rq-emRG#AK9A;'HXf!<A3Y9aF;s&b
%T\,UNhGtSeU8l'\@aS@F"X65OSmm"MO>f5BOu(I$HAhK"W@o`FQ5m2;jILaN:p#pE/N./WZjss%Yb2ge]fTc\=Ltb+V<a8C]T?cj
%oM8T=2a4UnDN$TE>m<eJjBXBT+Z5tHRk-&Fc4H2RC$V:[f^bmCN<Dl@.-bY20e2O&YdejcMb:/Ts!=VTWGbs+B.&F#-qT=G8(kr#
%6>]&$1,Z$&4%##)k,M_O_Nm22AgC2N7o;KQ5R]@1U6Ee!>if5q0*'CmQN^rYOa)rr$Kn@]E9i#kj;fAP*Y]ram\;qnoAjR^npPKJ
%mWG0D#&4YEL0/P"4Y>`dM.;kUEN90`LI!KNneY%\ZW;dO0,uHf@3^/um/*oW_mGru&l%[GaCN8?b46f9"?Yo1[Lk61Kp:\sm2JC=
%>sem4(#7+X87]-n]Ms1&3RP">Lg61Q.4X*KD,U_ICC3@O9qe1T*KNgYef!6[<7s0hTu%gmo-&]p(omdkB&^hoeRF)+FL=cWP;noB
%?/lN=;L#bMJB=I(&4Alhd9VG3BUR\JoI4N'/7C7C-BcCY)/%NWa/g^;L6j9JM(oHC*Y$>5C^k'Hke$4;ei%WCGlusJ;/sBEF&uD%
%#<KQb/QIk)858Mq1+H;cr$L8A_eP%GB3I1-n9QS8$*+;o-_@/1s16e?VM:_o1dmUmNRKlN.=,,o]S;WC*eqNl3[q9mkEeGSFgLMQ
%;]pR6\M6CFf.GE+?XoaGN%`85J5Hq;>3=5e9LGWX)\fon@`Wh0WW\ARg1_#g@Sq;]kC=V+^aWs3Vp6%rKcgT3I>((:Fo4$G_[RP"
%:CX7>"+TjdGsL-6C0?<lL6KY[f%[Nq.Dt#Z\tTS!9&LE=Z2TlW\Nd\t]G76blO+YLMjt'i#[J$_>Vrs][M:7;a>oNJ0#FqhG$"Aj
%,]',5[>Mc+P(WT@"OZc.#/,o+Z+EjVs7tG(`Q2U7L_%a:65adar#$]q>n5koSc5t;;'ZBI;?WNc#J_o?DlD._Z`j?J3ELcf&CYk"
%EM#c55Ym7.T.&QBbKo&b&u!O1p!5p/!NB<f(=#t+q:)+2mmYn^,TI,`m!?g71&lnSEj>2N]=<0Pa0YaLFoHI)UV@2OqQ^#[W@K1C
%bLaVcb5:]Gp!Fl'm":Ed9oKaL1hic)G+o#BbA_EGYUF]-5C3OP.mF-H_ejOV"*[#h/l-,%79KVoh)f5,?jLRW%LXp7V=9>]J-`RH
%mgOWUZqp)70VZqcKkWsl;20ZTVeWg\1DOh5h&I5;S(>iu[,F0`5\6gng?<tB@3@D>3#ikONDIAO-TO"D&d-?m("#b\s'\h9*@]po
%d\JcE>O=f`J!8ZLiZRX=W9"UI$2LZeQAm3OdnbI=]mfkDo/H,FT^6Ct)3s^TQOFTr#6UNcU3WHA\:mi=aRY6]BnCl+fT="X!3bZj
%XWiZqB=X_88Spf&g5-==-Fk;=6!C<e$t\H&r7S=F4C,>@\Zkf+C#iQ:U.d^\V%E-*5o;kq.SIeVrZ!cu5+FbmEN7?p$<?T\K9U;-
%)W8L3q#27=Kh=mF`G$AeD)EJN_5`%mY&s@6F*(J&P"KQ_,0n\m1_?poXA*Z-42*pLIo(dre!N>TiZJ2]Fqk`DU*UINP&\!%)*#a2
%QN]6^N1k3N)@A.b&%XkVodstQ!"4C_YfYXIIu[8*_di:KGoceAa-Tl_+k>NF4,!jW"5D<6RL5RSGe"@SRp$BW'l^%*M=Lk&`@ttt
%]Q$q_l6s/?Lj$*IaLYFan6^=io5]S&I"G:2V+`afe`?/LjUjkmU6c&FKhWo%6/`e@'V>/+g3&cLoK22t4)C]/)9blu@<57)7p"h;
%qY#[6e>YfKIKe?UUsYYJ+nM6jEB-:.i=mk]b<B'Bfd%"@DOO,OCrhaFKF`:(?A3'jKBI(c0jk]3("!m7EYDW"8HTtA:3&^\UV-Hc
%qm/^1LhM<OE4Xmrni'D[A#.L&:S]S8=*4_Q>T"4^-ZB?\j>,TDQ%^YVY-MkbTEHj$CgLX<T<o#;<ADk:h4ur>3"!j/^g;#!&E[2Z
%-Q)ZlQc6t@3^fCYl_VllQV/@)'f`acQk[hC6fG"7^8\[dj3R-_C7mZNnZ56XF$nn+SJ49?aS3aZQMFtA*3'+3"56fZ9+Aj,FS+;s
%Hr%jK68J]cL8Fsk:/e8]bJ9_Ra*=3:-=j-Ii*^J$)aYO@4WX9g*m(k!Nr+CQiU#)Xb<hDl$!'/R6[mucXWgC61@>CS%/a7I%-U9#
%6<4m9<;%ZH+iI73o7?qo^V@0t_UI1ZBMX=@h]F55BA">C_2<K%d.deekq3Tl;KS'q#Y.1SjTb?^d\]i5XaseZF@39CfjIP^(.Eh4
%ljSabBo6kA84Y+`CLml.j&\FT$5b9[$1VT(:dYX.(sksa$=WDcd^)K$Ns?#(."?*4p2d#C^f-L.iKTq?L#D)0,V/LTIH?!@L)b46
%,$UP9=!?93,IRVrN<?kq.!ddU(+f]Ji\^o(6;blWah!!u9j@\ApI#r5h1Ea7$k^1#%$kgcShEg<..KHHchMn]0t_Tnq!;Kt<"GR)
%\]&%Enh!YSZ^i5p^V[5j<q:ga<fnl&-m2:t-5&'W_!Ga.Ib;i6S][\JNU1pc<cVK)MOn5@($PJ9US+uA6!)^4cd*Q96cZ#9!uYtb
%Wb`Vp.bml[cfNe?Ide2Hg$b0&kc-I.N@m>f^heoM*O8j?g0fP6%S(?VFi\F#dM,lMVWb%enbL\RW5LrURu%W`-b1DU;)c)Ih'Q*@
%WZL#u(mkd>Wf,Yud6-@rqS9QG'EE?-(p3/&%!Ih%:G<>"FJ[/S'X%cDSOA\\:E<O^7]d#'(Ch1nSFUO#.A$0lFQrpoE^e9e'R-c!
%'RM9)Yu-U?H6\7T7*;I>ku&4P(6Lq"P!`b-/C%98!^5_al/l\'<:mJhb0B%4o8CjB>`gWl;BJCmo"^_dUKBf`Fi/u_A$7LPi>a]h
%DATQ;;'["2j.Kpi]c;eTMO8PMXaP>q(jI(<KD@cZh1!X_'=l9R"`]Do0tch1I\AVBWV"?F:IUC%&37uD[=[))/@>g1HOo4U'V$oe
%EX-#kl_Y#tpb=?MXMN'iDk^)[7Yni$Z$hA\>&.iM?@kS[>NQ6>'^VW2.1<Zm8\O\sU3MQQ4bt7_.&+b^hjgOoads9;1(7=k@DCPo
%or1lai+f7Ml3S-d<]TB,62M]Y@ci9/A#h^$Cq*;0TT)43`B[LR]'XLOROI$R"J.0/S:S'(.qcC)'Z5DfGeZhQ'ol@+l;d&j;)X*D
%;/hCIa;sARIH0]JJjlhg(a+OAl^qh7aI<f:.#k`VQ.fOfE!,,p,Aot:jE+2)P?)E31!CIK&]>UIP"]Ton]P4CeLH5j-\%oLOC:sI
%LjE>BZC>AnlGnaeO\?X2P=L#_P&U;LZZt@u]0!stX;%G5+2n#I^/)SO\HbNc@]tJ.@'^t.mA"h>]M@k7@Q[SCW!uh0I"jNW7hou'
%Ab!BK;P3:VGPB3t?GF8Pq>4lC)Rekfqc)6h9#a?niq6@`UEJY_kXY4#1YUD-ijtP@?b_&<s7We&?V05DmZUH(]Qq$aq7HAShZ!6'
%p\/TkMFq#%4:PM5X_?t3]79V<^U,OpL@'Ia_=uhls7ui@rFOR)\h))N)/JX\fG;0W^[@&Lg:'SO?JiE_np^StbHJ[/VrabsEhDCg
%^9?k$*Jo7hKqgKC]<Au^<s!:'m,@9rrUYe'n*[sGs7G]jq`halp3ruCBtaQ/bnO-g8([l`I'c)t=s^p>8u@CSNs\Llr9EsAqf]YZ
%s#)o7lbfFJdsN6qWUJWkJ\^`$06j\^V%]1.E-1AL^9HefMcguj`nE<tdZ:d\5CEA)3X"DmP\S*E+N0T>*UAX^k:b*Chq>^#TF9*6
%4bqoBTAREIl?N-L2k+QhO2SL\F9J%^X6u8h[;m=<poZf*pi:_?jSjr1#J=r`fV`0o6Y+XPa+2?7^GsA]$ea<F,!>_>.\"_VMeiZp
%lM?A'+"Wn29S>oc=T1R]$AWl-s,?=\*Y[M[+25MG`qoKoZMgLn(:r"S`R9]BSH4&Is1H+\J+NC.f=,,eq>R_XO3%^%Ps_[UcY,2u
%AI:YGdJDk[R2Q"-U]5f5K!EYds.8m>2rY&"`CPP;%gTV!&?u*\ns0nqMI.uGEnTP+3$Q-0jn]J59knk9DY@kPDc#Xi?an[sF*s)q
%puk,0TRk=qbOi9)EA:E[ho?.Ohm3RQ<=^]pd4("%4%`3hs-ZjaDtr4<PC<;>V$6j*Da.':^]*8n\FY,%n@sJ9gU[@]pV(5L=E_HW
%XBrV:g>B#M<O[l*qBMN)kS*:)Fb=mF&Wq8$lt$]c'CDei5cI"O[5PR%b]#9la#8Y8aOedNfq?D$SO9KBRR*5ao0=hoBM5ome/FiG
%r,Pt?kfV:&KtgK($8KUBV-VE*:O!hpI1sIS"Dd#(h\;6@!^mK^@O@:[.'2G,JAhOG\&M<iQ,G5I@/I]I<?j?mmq@I@qp<,gYMf(*
%9a@LPL;N(Bn4hNC`ZqDt-\5$^:CNLTh]hb5O#&%bj\-9nK:,2=htgr\!^jopbrHi<!LXt0Zi]2bGfH#=D8D+.d"iA<Bf?H,ZnW%4
%g2n<rSm&j>BmE+UmRNLSr<+TE*+<Xf`6k=\;:lMm[NU8>BdNI"7HdYaCg1MMiA(rZ1e.a'QkEkmC6>Y]M'+Z#V'(A,<TZ^(m+Ahg
%8"/^+G,$`$nG7*7eajV&?D81OZ's<HoWk.2!>;-^&p0ZY*iZ'9Tn#+9)o_&k%)lechEE31e2kq]TFpT8cChOb<45RGqZ'p*@6'-a
%Qamk)-)ZTN>6%O4&C#t#cbl\Sp&ZL&!KoA+W8;Z:3;+6r`_$^/&>9S*ltO:&U_9sF,I>gO,!'II;li88%,+TU!iK&:mnQ!3D=F#/
%#:k6e9[RN93K5M7=],4#Kd[HLA"NcgI2ndlBX!/s#KsI5M$;uJ&A<Z9XA?cj35D3p+IOh)W\EKXc]1*;e1AtPna6Z7i$&p&$b+`2
%$Hu#t-7<Y,haY$$<Gd$2dC2hqZ^h:Lge)\-5hEF$cTZP.)D8Ko1".LYQSpR-okg=S-Uj](=ptb:,Di+rV6W@ob8iRHc9V9p!nK5X
%DS2VVTQjLh[$G[PR*6s&f@QFsAWL:$&'r-[b<f/WZ(gGin?ScU'!9'mHVfYY_k'P!Y9'6X:8b&^l0Nf_Hg6sA/6gfR\e0BGEBib!
%FCB5e3(I'45?sctV"]i_]G6Cu9bNk/Oj:C(G#o4hm8>C.6S`??:$$XNJiK/!DH@LoDPWLN-tPE=I0uP+qNrY*QDmrZkIcWC?CMCM
%@7rmnZQ%X&!g;5$!0,>"'S1(%NP]rcrA&M&A9[7D_#j9i[.&@dTSQYUMoW_m_N1QeLtiTq2q8Cin0(`Z7T!;+i[p!qgo:rm9pBg4
%6&uKFE:Pd^l*dT(HSW_fM2eh4r(8it^8$::FJ=:@I-a%OO*ZGF&ti>=d1$Z#RCVmtSoRVh1HX`K5Tu?+7c+q-ltujs/\"o-!lkjA
%?_EL&+2\^oCY&YOV'%.0EdL&t!XlQ$;JS^,`0%YTP:cG:]K(VJ8u/dNEM="m)^RM&.@;C0M'6N*=mn`t:Y(ZR_V?O11F2aMQ79cs
%/$JKd6_Lg&-S96o;7SkpV+'j.#1<K':[QSNdSX@72XX>[kiL20j)b9[73Q-`cJB<t<P2L3S:,eR>j*uHH?C=rgV$,a>"Y=keCpgR
%Xa(!m[q<b3^4Y!ibku!J9H6%!(i!fC1pn6kV;Z;+S2(Ln7q&SGa/tI.$(s7=8YfmHm.DbT*h-_%^!WN*-%f<6-J/m<%Nc0aR"#]F
%d0_,Foot_s%iB:%'1!YIj+*)!Y83uL]r\.<E*4W[UQ`QMN]:ga?r,UlFGd6Ljh_Ua<]M3e-\[o1%ge)mj1[iKf*_E6^VmE*r<PG5
%b^hp,[f-$S[<C(E[E3Tji"S$_rWSm!/eM`ghOj+(gb)&'92<2c3'C7p)4<EY5W:qgkkg>TIROhu]f/L@22SVb)2R/K'fe]YZu;fC
%p&^Et*Z?qd2es/dq8/bSe42J;dJOV1!-t%ha;`4i1"!i,+?$#VlGPjiPWnJK786I*j6.g*`&$?*QYguODHl*`JAW*<nnqKcpcfn*
%k%K\2Q\#ejYC7WR+g.+p*FP]R!aQ:N?&"*cO/?*7khEr2-oe%?j:9Vpen5KcH0=L,]r^L![)-B3P'UD1N<a:;Xa1-`ou<`;P_+>(
%-JPjmDF.7iPnTAiML:EQ?8U_X5IJJCW0\+DY-=hCV@8+.;:qYigl5Q'EJ"rT?'C^pCd@B3a>d;&mB_&@fsbpLf8YoHNt1K^*7c7D
%QC65L1je`q8%0GU7c0`$g.jc@Rg"QUPM0?o)gC;#49ouqBKNIb[Fb)Z]6\CBXAuFf`0kN#QZ=cgKX+FDOQjXr*W9kPe%TO\41jum
%DA4$&9Mu*m^YA/I$/Nd%2t\Y@9h^Rg+O.kn_2AKU"IqIgT)&@*2$Al'kfF?@F4KO"!.4)`^+7Jm:[GAp33<s!''Im0kkO#IBn&`J
%([agPCXmmAU@@s5E&Ef*-.JIuOqYXL%V)(6`2A_OA(*T?is(isULL#piFHM`AH=A1#WbE*TEB7rMQtaJ1)uNDL;MM'(&;ST?"H&V
%(TUC8rP4keg:/2R;N'^(I4(O)H/>6peu=7pqmD0Rc0],o[S_,6]rH)I7iYT6F9\Sb^I2.IQs_.M'qCA*N&E)Yj]C*B-TPE9S&$7t
%ds$'$cdu<'#]VHKVdrVmOKEPtK==Eh8?`d"F>!U0&KRK-eQr[:OQ!(l2nU#dHpLa?m"WWT(Q0JZG)I=`G#C:i/VTP_]UnYHO.M2<
%@[5](WY^-e`Ef%4=)nQmL*^mBGaXM+A%D>41iS7Y&1]3V>NXYOYJZV8Y"D(CfCO7Q,WDN-$hXGP;Z^Q9.$_f%B2@-DI4I_UVC5Sg
%d*'fg$Df@,?&d;%67/]HE(((C:8Z@KZq7?l0V),XE"=l7Cne_]Q8LR(7M73Z=XaTUb!8i\k8/gm1qUKU]@#)t:iIA?#/_GV@\U@f
%66\=64liX'ctsL8TOA^tUcCk7:DKeMAl-r,Q(!92g?WHCIB^qcUP$G$N@ohs19#MYW+U7KBO>$'d[ff6MIlAo"gWo!eBlT.Y5ApG
%;Xh2IU5L9mZ$hnkKN9*&[.hj:`eQj?ht?_,V.gi6?ud1Pc#Q`>V04'MmP2h#NXG9.U#<`-l;fn62QRLqd(o*3mg.f9%+dn%H!c[R
%/hMn,dmUfo&sA5%\0uUEoS@$jLd+"k7hO/_g^ee?jaok*T4Y&saAcqPAriOof?G6Pn.`W<)XAU5o.pQ/Sa&_SHM+f0B*jmE/etZs
%\]@B5I"5B/H<F)UG:%dffi@=G,f)lYQ08MpAS[JW1D]!=Cgg#0GcMMriiP6#>r8_qs!\t$@5J2r)%cYj]LZ!3[1#8/p)jCs]QA,R
%[Nt<#%tBLh:q(sqCCFd#'t?N&pYGAATU>nM;'hVSV:+F`8.HS!AQFOpi<(9#3fa:-Xir=$d6QhF:/Hh&"qg(AW_1Od?,8.T'_LT%
%$$/EC''gf4M$_p61'9:]=RcB*^_#Sq5X^56%KWrfi#,]3K*[pp\\S0NpLepWgrkjF"/-<Y!fF51&`f%!&l<^5Gt5SB'Q+nM)PGW+
%@]&mI.@1dDap@8Q[Aad$jid_IDcG]]6rmoOP%1'Vo<L06p6Q?N;Qt'h8s+&6CBIBN0i;_KAkO-CLdWI84@%u.!/+VBJ7sigcCT1?
%OlNkm?)*HNBI+0412g5F<%r-@IQPr1+DaG@Um6&"W4011d9rumL]KH_Y:B6=?<A9?&A/rRYS78`Rm`$`Dj0'h9=FZ;4ZmC_=E:6h
%3r;rJFs_XjoV6t"D2J,I:Sj&e5LEa2E,?s;5p&k"R`gLMKD@)Z2=?(Z?CVhbM8GF7<47=c5[gQPrJ4T0\Nk3Z#Pe[d';&`ODfc#=
%.U<Iq)K/K754GfW@*8,e5Z`uUd[-M4$R.A[\apCj:Q?H[>;1-+^=3b*U]_Kf5NH,U'I1"F]U1I&4!58>^/Ykr(^P*]Eg4G-L-CHP
%N3/A`^`'!,&\oO.AuG/hd:+9=-3t(C.BO_eV[X'%@X_!0LfT3@dnk%C@5eVA(-ZK*Y:\VaFt?2VS*s+@p1e%j_(`0[\nh(t@TSVl
%H5*j.q&hb0,jGS5r>&MeI2g5e)ZH,<$CX,sNZeq5`__B\[;C2?XrO\nn,tTV3\8<L0I%#F+<=&qpT@@.l/3>u%&V#bNdPSeKJdu[
%9uscU6.)_QDm0%q=]gk">?\%.(Q7.ZMm?SGhI'.a?Y2;D-_89)^c"n?OJn&-<0r2@L^Q4@F7?efWBESPr0aum.?;Z">m<J_LSqf,
%0!%,H$4+KVYaI=!$<CHbTl?F&I:EV_TC3.TI3qJfFk/t*fRdE);n$=pd$;t5+YPL/\5K1p6_.oCMLe<H\Fe$]5pU/;8utm.WM\+K
%?6Xe8#7eaFQ3UQbr.C1]nn?GdWE&X_"uU]m*q@CDneBUsR2;_3A+`>kk8F[<=qn*4Zp!-rQb[rr'uO>dOB_le$E(fR3=uk1+VkOW
%ho(Y1Ft)+LIesm]FuUcmRN"#e+;iCWW3P95<74[kESa2lB$hdKT)s2ZP@rS$bMm+[6/SGrkTgHI_U&U>X=5Dd`-1&4Pst<N8_?`F
%.(pK08J&PS7mr08$\NlVThR3E8Ya1`E\LWc)5G\Y!9NE4OQb?%%,iQ^N>2hQq$N4]4FkrMOPA5Ncn8t)2Wuop'"essj/<u5"._dg
%GA/W]6S0M\;;D[=Cqm9F6`gI4%Ne(WF'IFZ1CqB*ND%)AG#>arU>n19/IFm#pS?3iPE*X#U.C[)#6#9lY$`V"H!>DSSX/E@jc:eG
%%Ncg^1dZQ;@;0&']_ZWWH'?**C+67+kap)@5[d=MXWM-RXIMn]Dr:H'79QZ*]i\8/A_@9AF4=+_5Ir`Na.G[LJ*M+&O78*bWFAZW
%p&\j:Pun46j0$7VU(ko#SUb65:@K<2.a3,KjiagDJM*`'Klcl_+Z>j9hh7D(T^A4fTIX`QE/s?:/@>$+X0gdlU@)#Bd"V+bE/kth
%CcI:?<Jn;UF@]^g<-0Fg'[G*SL"LosL+caSh](r_3m`TQTQ#qjYYjqCgr02`;=XVa@YXs%^V.UOmckl`#)#MWdfJl9NAG%\lCAa`
%ZCheALW$_P0h'Vp%/Kt2DsA#3cmn<0!@<4:@/WY"jV6guFj'^PcblA4ORIE^FMSFD7`<?BVpl!`eCQ*6I8`C>Sbcq]E8W!<%.($Z
%E2hL_"N\uF#f\QR.mX8GYiID%[t7Y99jFBDFO`fU,Ur^+lE0,DMtbAR_liil'WifZn?RYu)-9Se>nBC9C3U/X"RroDefBQKG9J?W
%&lP]Il5.?s:WQ-fd@lGL>LdQ_KoiG/U;?+0+?RV6MTV0^S1bjK'[>\H5rGoK-eacdLK&'1q@;@T_GSX?]gh_rTDXF2U$L,kD4`o`
%>.%u"+DGXe*:oJ&NqSblS?!>eP1Wd!X?O"un68l,6T05-@aNt!MKl:-'O*Q>BfbOpMjfTHZ\'&[W,8b_hPr0YGNADaBTa9i<;E%K
%A5KhKlp)=qOIq[W<3f]oDY<(NR,]!6bB/G"lF*=e'Z<F'NprCsqf?l:SXs`R-T^i\emYlY]:(+W0KHj38,'+B.!%%ZO[Go<YIGY)
%SE<gledh=];)0k6@^oMI(.Fhg7+$c7APe5jN$-)diM96iFh)KApmC7GCs/@1a$PSZ`Gl,7MTOE)=__KEEHeipS<2EgFX#o3s)k[I
%h1nq$ALVs7`W+jkJrp<d`eabs/m!VN7fcHi?%u`>^_hiJ!QD-p90hiJ+_lX[(oltRB$P!M;*_;C('@kCXY5&`.!g>#DbqE)&LG5S
%X,YpK9t^l?O#>I(cjQV.]HQG#'qPe55Bk2$NCVEZF%,'D,R5HH*^)&He>shb6X$.Jc?VYg_?P=>1n]b"nrCLL#,PMR'L5dbYOZB7
%dKCMkIlJ679!pBXjj8BF&#IIII7*eQhk^;Oea"kA0E1/6mDg;mi+KfOn^[R[hS/d]iVr4?J+D.%(Os-5Hh$qi63uCsdsnt+lL"P^
%pM\pFhnAp1S%f!?8)o5orTmV#rUis9o"WFD&ha~>
%AI9_PrivateDataEnd
